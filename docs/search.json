[
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html",
    "href": "posts/Numpy_Basic/numpy_basic.html",
    "title": "Jung_coding",
    "section": "",
    "text": "“numpy 기본 코드 실습(한글)”\n\n\ntoc:true\nbranch: master\nbadges: true\ncomments: true\ncategories: [jupyter, python]\n\n도구 - 넘파이(NumPy)\n*넘파이(NumPy)는 파이썬의 과학 컴퓨팅을 위한 기본 라이브러리입니다. 넘파이의 핵심은 강력한 N-차원 배열 객체입니다. 또한 선형 대수, 푸리에(Fourier) 변환, 유사 난수 생성과 같은 유용한 함수들도 제공합니다.”\n\n\n\n구글 코랩에서 실행하기"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#np.zeros",
    "href": "posts/Numpy_Basic/numpy_basic.html#np.zeros",
    "title": "Jung_coding",
    "section": "np.zeros",
    "text": "np.zeros\nzeros 함수는 0으로 채워진 배열을 만듭니다:\n\nnp.zeros(5)\n\narray([0., 0., 0., 0., 0.])\n\n\n2D 배열(즉, 행렬)을 만들려면 원하는 행과 열의 크기를 튜플로 전달합니다. 예를 들어 다음은 \\(3 \\times 4\\) 크기의 행렬입니다:\n\nnp.zeros((3,4))\n\narray([[0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.]])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#용어",
    "href": "posts/Numpy_Basic/numpy_basic.html#용어",
    "title": "Jung_coding",
    "section": "용어",
    "text": "용어\n\n넘파이에서 각 차원을 축(axis) 이라고 합니다\n축의 개수를 랭크(rank) 라고 합니다.\n\n예를 들어, 위의 \\(3 \\times 4\\) 행렬은 랭크 2인 배열입니다(즉 2차원입니다).\n첫 번째 축의 길이는 3이고 두 번째 축의 길이는 4입니다.\n\n배열의 축 길이를 배열의 크기(shape)라고 합니다.\n\n예를 들어, 위 행렬의 크기는 (3, 4)입니다.\n랭크는 크기의 길이와 같습니다.\n\n배열의 사이즈(size)는 전체 원소의 개수입니다. 축의 길이를 모두 곱해서 구할 수 있습니다(가령, \\(3 \\times 4=12\\)).\n\n\na = np.zeros((3,4))\na\n\narray([[0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.]])\n\n\n\na.shape\n\n(3, 4)\n\n\n\na.ndim  # len(a.shape)와 같습니다\n\n2\n\n\n\na.size\n\n12"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#n-차원-배열",
    "href": "posts/Numpy_Basic/numpy_basic.html#n-차원-배열",
    "title": "Jung_coding",
    "section": "N-차원 배열",
    "text": "N-차원 배열\n임의의 랭크 수를 가진 N-차원 배열을 만들 수 있습니다. 예를 들어, 다음은 크기가 (2,3,4)인 3D 배열(랭크=3)입니다:\n\nnp.zeros((2,2,5))\n#뒤에서부터 읽으면 해석하기 편함\n\narray([[[0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.]],\n\n       [[0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.]]])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#배열-타입",
    "href": "posts/Numpy_Basic/numpy_basic.html#배열-타입",
    "title": "Jung_coding",
    "section": "배열 타입",
    "text": "배열 타입\n넘파이 배열의 타입은 ndarray입니다:\n\ntype(np.zeros((3,4)))\n\nnumpy.ndarray"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#np.ones",
    "href": "posts/Numpy_Basic/numpy_basic.html#np.ones",
    "title": "Jung_coding",
    "section": "np.ones",
    "text": "np.ones\nndarray를 만들 수 있는 넘파이 함수가 많습니다.\n다음은 1로 채워진 \\(3 \\times 4\\) 크기의 행렬입니다:\n\nnp.ones((3,4))\n\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.]])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#np.full",
    "href": "posts/Numpy_Basic/numpy_basic.html#np.full",
    "title": "Jung_coding",
    "section": "np.full",
    "text": "np.full\n주어진 값으로 지정된 크기의 배열을 초기화합니다. 다음은 π로 채워진 \\(3 \\times 4\\) 크기의 행렬입니다.\n\nnp.full((3,4), np.pi)\n\narray([[3.14159265, 3.14159265, 3.14159265, 3.14159265],\n       [3.14159265, 3.14159265, 3.14159265, 3.14159265],\n       [3.14159265, 3.14159265, 3.14159265, 3.14159265]])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#np.empty",
    "href": "posts/Numpy_Basic/numpy_basic.html#np.empty",
    "title": "Jung_coding",
    "section": "np.empty",
    "text": "np.empty\n초기화되지 않은 \\(2 \\times 3\\) 크기의 배열을 만듭니다(배열의 내용은 예측이 불가능하며 메모리 상황에 따라 달라집니다):\n\nnp.empty((2,3))\n\narray([[9.6677106e-317, 0.0000000e+000, 0.0000000e+000],\n       [0.0000000e+000, 0.0000000e+000, 0.0000000e+000]])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#np.array",
    "href": "posts/Numpy_Basic/numpy_basic.html#np.array",
    "title": "Jung_coding",
    "section": "np.array",
    "text": "np.array\narray 함수는 파이썬 리스트를 사용하여 ndarray를 초기화합니다:\n\nnp.array([[1,2,3,4], [10, 20, 30, 40]])\n\narray([[ 1,  2,  3,  4],\n       [10, 20, 30, 40]])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#np.arange",
    "href": "posts/Numpy_Basic/numpy_basic.html#np.arange",
    "title": "Jung_coding",
    "section": "np.arange",
    "text": "np.arange\n파이썬의 기본 range 함수와 비슷한 넘파이 arange 함수를 사용하여 ndarray를 만들 수 있습니다:\n\nnp.arange(1, 5)\n\narray([1, 2, 3, 4])\n\n\n부동 소수도 가능합니다:\n\nnp.arange(1.0, 5.0)\n\narray([1., 2., 3., 4.])\n\n\n파이썬의 기본 range 함수처럼 건너 뛰는 정도를 지정할 수 있습니다:\n\nnp.arange(1, 5, 0.5)\n\narray([1. , 1.5, 2. , 2.5, 3. , 3.5, 4. , 4.5])\n\n\n부동 소수를 사용하면 원소의 개수가 일정하지 않을 수 있습니다. 예를 들면 다음과 같습니다:\n\nprint(np.arange(0, 5/3, 1/3)) # 부동 소수 오차 때문에, 최댓값은 4/3 또는 5/3이 됩니다.\nprint(np.arange(0, 5/3, 0.333333333))\nprint(np.arange(0, 5/3, 0.333333334))\n\n[0.         0.33333333 0.66666667 1.         1.33333333 1.66666667]\n[0.         0.33333333 0.66666667 1.         1.33333333 1.66666667]\n[0.         0.33333333 0.66666667 1.         1.33333334]"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#np.linspace",
    "href": "posts/Numpy_Basic/numpy_basic.html#np.linspace",
    "title": "Jung_coding",
    "section": "np.linspace",
    "text": "np.linspace\n이런 이유로 부동 소수를 사용할 땐 arange 대신에 linspace 함수를 사용하는 것이 좋습니다. linspace 함수는 지정된 개수만큼 두 값 사이를 나눈 배열을 반환합니다(arange와는 다르게 최댓값이 포함됩니다):\n\nprint(np.linspace(0, 5/3, 6))\n\nNameError: name 'np' is not defined\n\n\n\n#import numpy as np\n\nModuleNotFoundError: No module named 'numpy'\n\n\n\nmy_arr = np.arange(1000000)\nmy_list = list(range(1000000))\n\n%time for _ in range(10) : my_arr2 = my_arr * 2\n%time for _ in range(10) : my_list2 = [x*2 for x in my_list]\n\nCPU times: user 6.37 ms, sys: 5.31 ms, total: 11.7 ms\nWall time: 11.7 ms\nCPU times: user 433 ms, sys: 70.4 ms, total: 503 ms\nWall time: 503 ms\n\n\n\n#import sys\nsize = 10\n%timeit for x in range(size): x **2\n    #out: 10 loops, best of 3: 136 ms per loop\n%timeit for x in np.arnage(size): x **2\n    #out: 1 loops, beast of 3: 1.16s per loop\n%timeit np.arange(size)**2\n#out: 100 loops, beast of 3: 19.5ms per loop"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#np.rand와-np.randn",
    "href": "posts/Numpy_Basic/numpy_basic.html#np.rand와-np.randn",
    "title": "Jung_coding",
    "section": "np.rand와 np.randn",
    "text": "np.rand와 np.randn\n넘파이의 random 모듈에는 ndarray를 랜덤한 값으로 초기화할 수 있는 함수들이 많이 있습니다. 예를 들어, 다음은 (균등 분포인) 0과 1사이의 랜덤한 부동 소수로 \\(3 \\times 4\\) 행렬을 초기화합니다:\n\nnp.random.rand(3,4)\n\narray([[0.37892456, 0.17966937, 0.38206837, 0.34922123],\n       [0.80462136, 0.9845914 , 0.9416127 , 0.28305275],\n       [0.21201033, 0.54891417, 0.03781613, 0.4369229 ]])\n\n\n다음은 평균이 0이고 분산이 1인 일변량 정규 분포(가우시안 분포)에서 샘플링한 랜덤한 부동 소수를 담은 \\(3 \\times 4\\) 행렬입니다:\n\nnp.random.randn(3,4)\n\narray([[ 0.83811287, -0.57131751, -0.4381827 ,  1.1485899 ],\n       [ 1.45316084, -0.47259181, -1.23426057, -0.0669813 ],\n       [ 1.01003549,  1.04381736, -0.93060038,  2.39043293]])\n\n\n이 분포의 모양을 알려면 맷플롯립을 사용해 그려보는 것이 좋습니다(더 자세한 것은 맷플롯립 튜토리얼을 참고하세요):\n\n%matplotlib inline\n#import matplotlib.pyplot as plt\n\n\nplt.hist(np.random.rand(100000), density=True, bins=100, histtype=\"step\", color=\"blue\", label=\"rand\")\nplt.hist(np.random.randn(100000), density=True, bins=100, histtype=\"step\", color=\"red\", label=\"randn\")\nplt.axis([-2.5, 2.5, 0, 1.1])\nplt.legend(loc = \"upper left\")\nplt.title(\"Random distributions\")\nplt.xlabel(\"Value\")\nplt.ylabel(\"Density\")\nplt.show()"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#np.fromfunction",
    "href": "posts/Numpy_Basic/numpy_basic.html#np.fromfunction",
    "title": "Jung_coding",
    "section": "np.fromfunction",
    "text": "np.fromfunction\n함수를 사용하여 ndarray를 초기화할 수도 있습니다:\n\ndef my_function(z, y, x):\n    return x + 10 * y + 100 * z\n\nnp.fromfunction(my_function, (3, 2, 10))\n\narray([[[  0.,   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.],\n        [ 10.,  11.,  12.,  13.,  14.,  15.,  16.,  17.,  18.,  19.]],\n\n       [[100., 101., 102., 103., 104., 105., 106., 107., 108., 109.],\n        [110., 111., 112., 113., 114., 115., 116., 117., 118., 119.]],\n\n       [[200., 201., 202., 203., 204., 205., 206., 207., 208., 209.],\n        [210., 211., 212., 213., 214., 215., 216., 217., 218., 219.]]])\n\n\n넘파이는 먼저 크기가 (3, 2, 10)인 세 개의 ndarray(차원마다 하나씩)를 만듭니다. 각 배열은 축을 따라 좌표 값과 같은 값을 가집니다. 예를 들어, z 축에 있는 배열의 모든 원소는 z-축의 값과 같습니다:\n[[[ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\n  [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]]\n\n [[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n  [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]]\n\n [[ 2.  2.  2.  2.  2.  2.  2.  2.  2.  2.]\n  [ 2.  2.  2.  2.  2.  2.  2.  2.  2.  2.]]]\n위의 식 x + 10 * y + 100 * z에서 x, y, z는 사실 ndarray입니다(배열의 산술 연산에 대해서는 아래에서 설명합니다). 중요한 점은 함수 my_function이 원소마다 호출되는 것이 아니고 딱 한 번 호출된다는 점입니다. 그래서 매우 효율적으로 초기화할 수 있습니다."
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#dtype",
    "href": "posts/Numpy_Basic/numpy_basic.html#dtype",
    "title": "Jung_coding",
    "section": "dtype",
    "text": "dtype\n넘파이의 ndarray는 모든 원소가 동일한 타입(보통 숫자)을 가지기 때문에 효율적입니다. dtype 속성으로 쉽게 데이터 타입을 확인할 수 있습니다:\n\nc = np.arange(1, 5)\nprint(c.dtype, c)\n\nint64 [1 2 3 4]\n\n\n\nc = np.arange(1.0, 5.0)\nprint(c.dtype, c)\n\nfloat64 [1. 2. 3. 4.]\n\n\n넘파이가 데이터 타입을 결정하도록 내버려 두는 대신 dtype 매개변수를 사용해서 배열을 만들 때 명시적으로 지정할 수 있습니다:\n\nd = np.arange(1, 5, dtype=np.complex64)\nprint(d.dtype, d)\n\ncomplex64 [1.+0.j 2.+0.j 3.+0.j 4.+0.j]\n\n\n가능한 데이터 타입은 int8, int16, int32, int64, uint8|16|32|64, float16|32|64, complex64|128가 있습니다. 전체 리스트는 온라인 문서를 참고하세요."
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#itemsize",
    "href": "posts/Numpy_Basic/numpy_basic.html#itemsize",
    "title": "Jung_coding",
    "section": "itemsize",
    "text": "itemsize\nitemsize 속성은 각 아이템의 크기(바이트)를 반환합니다:\n\ne = np.arange(1, 5, dtype=np.complex64)\ne.itemsize\n\n8"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#data-버퍼",
    "href": "posts/Numpy_Basic/numpy_basic.html#data-버퍼",
    "title": "Jung_coding",
    "section": "data 버퍼",
    "text": "data 버퍼\n배열의 데이터는 1차원 바이트 버퍼로 메모리에 저장됩니다. data 속성을 사용해 참조할 수 있습니다(사용할 일은 거의 없겠지만요).\n\nf = np.array([[1,2],[1000, 2000]], dtype=np.int32)\nf.data\n\n<memory at 0x7f97929dd790>\n\n\n파이썬 2에서는 f.data가 버퍼이고 파이썬 3에서는 memoryview입니다.\n\nif (hasattr(f.data, \"tobytes\")):\n    data_bytes = f.data.tobytes() # python 3\nelse:\n    data_bytes = memoryview(f.data).tobytes() # python 2\n\ndata_bytes\n\nb'\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\xe8\\x03\\x00\\x00\\xd0\\x07\\x00\\x00'\n\n\n여러 개의 ndarray가 데이터 버퍼를 공유할 수 있습니다. 하나를 수정하면 다른 것도 바뀝니다. 잠시 후에 예를 살펴 보겠습니다."
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#자신을-변경",
    "href": "posts/Numpy_Basic/numpy_basic.html#자신을-변경",
    "title": "Jung_coding",
    "section": "자신을 변경",
    "text": "자신을 변경\nndarray의 shape 속성을 지정하면 간단히 크기를 바꿀 수 있습니다. 배열의 원소 개수는 동일하게 유지됩니다.\n\ng = np.arange(24)\nprint(g)\nprint(\"랭크:\", g.ndim)\n\n[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]\n랭크: 1\n\n\n\ng.shape = (6, 4)\nprint(g)\nprint(\"랭크:\", g.ndim)\n\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]\n [12 13 14 15]\n [16 17 18 19]\n [20 21 22 23]]\n랭크: 2\n\n\n\ng.shape = (2, 3, 4)\nprint(g)\nprint(\"랭크:\", g.ndim)\n\n[[[ 0  1  2  3]\n  [ 4  5  6  7]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n랭크: 3"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#reshape",
    "href": "posts/Numpy_Basic/numpy_basic.html#reshape",
    "title": "Jung_coding",
    "section": "reshape",
    "text": "reshape\nreshape 함수는 동일한 데이터를 가리키는 새로운 ndarray 객체를 반환합니다. 한 배열을 수정하면 다른 것도 함께 바뀝니다.\n\ng2 = g.reshape(4,6)\nprint(g2)\nprint(\"랭크:\", g2.ndim)\n\n[[ 0  1  2  3  4  5]\n [ 6  7  8  9 10 11]\n [12 13 14 15 16 17]\n [18 19 20 21 22 23]]\n랭크: 2\n\n\n행 1, 열 2의 원소를 999로 설정합니다(인덱싱 방식은 아래를 참고하세요).\n\ng2[1, 2] = 999\ng2\n\narray([[  0,   1,   2,   3,   4,   5],\n       [  6,   7, 999,   9,  10,  11],\n       [ 12,  13,  14,  15,  16,  17],\n       [ 18,  19,  20,  21,  22,  23]])\n\n\n이에 상응하는 g의 원소도 수정됩니다.\n\ng\n\narray([[[  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [999,   9,  10,  11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23]]])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#ravel",
    "href": "posts/Numpy_Basic/numpy_basic.html#ravel",
    "title": "Jung_coding",
    "section": "ravel",
    "text": "ravel\n마지막으로 ravel 함수는 동일한 데이터를 가리키는 새로운 1차원 ndarray를 반환합니다:\n\ng.ravel()\n\narray([  0,   1,   2,   3,   4,   5,   6,   7, 999,   9,  10,  11,  12,\n        13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#규칙-1",
    "href": "posts/Numpy_Basic/numpy_basic.html#규칙-1",
    "title": "Jung_coding",
    "section": "규칙 1",
    "text": "규칙 1\n배열의 랭크가 동일하지 않으면 랭크가 맞을 때까지 랭크가 작은 배열 앞에 1을 추가합니다.\n\nh = np.arange(5).reshape(1, 1, 5)\nh\n\narray([[[0, 1, 2, 3, 4]]])\n\n\n여기에 (1,1,5) 크기의 3D 배열에 (5,) 크기의 1D 배열을 더해 보죠. 브로드캐스팅의 규칙 1이 적용됩니다!\n\nh + [10, 20, 30, 40, 50]  # 다음과 동일합니다: h + [[[10, 20, 30, 40, 50]]]\n\narray([[[10, 21, 32, 43, 54]]])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#규칙-2",
    "href": "posts/Numpy_Basic/numpy_basic.html#규칙-2",
    "title": "Jung_coding",
    "section": "규칙 2",
    "text": "규칙 2\n특정 차원이 1인 배열은 그 차원에서 크기가 가장 큰 배열의 크기에 맞춰 동작합니다. 배열의 원소가 차원을 따라 반복됩니다.\n\nk = np.arange(6).reshape(2, 3)\nk\n\narray([[0, 1, 2],\n       [3, 4, 5]])\n\n\n(2,3) 크기의 2D ndarray에 (2,1) 크기의 2D 배열을 더해 보죠. 넘파이는 브로드캐스팅 규칙 2를 적용합니다:\n\nk + [[100], [200]]  # 다음과 같습니다: k + [[100, 100, 100], [200, 200, 200]]\n\narray([[100, 101, 102],\n       [203, 204, 205]])\n\n\n규칙 1과 2를 합치면 다음과 같이 동작합니다:\n\nk + [100, 200, 300]  # 규칙 1 적용: [[100, 200, 300]], 규칙 2 적용: [[100, 200, 300], [100, 200, 300]]\n\narray([[100, 201, 302],\n       [103, 204, 305]])\n\n\n또 매우 간단히 다음 처럼 해도 됩니다:\n\nk + 1000  # 다음과 같습니다: k + [[1000, 1000, 1000], [1000, 1000, 1000]]\n\narray([[1000, 1001, 1002],\n       [1003, 1004, 1005]])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#규칙-3",
    "href": "posts/Numpy_Basic/numpy_basic.html#규칙-3",
    "title": "Jung_coding",
    "section": "규칙 3",
    "text": "규칙 3\n규칙 1 & 2을 적용했을 때 모든 배열의 크기가 맞아야 합니다.\n\ntry:\n    k + [33, 44]\nexcept ValueError as e:\n    print(e)\n\noperands could not be broadcast together with shapes (2,3) (2,) \n\n\n브로드캐스팅 규칙은 산술 연산 뿐만 아니라 넘파이 연산에서 많이 사용됩니다. 아래에서 더 보도록 하죠. 브로드캐스팅에 관한 더 자세한 정보는 온라인 문서를 참고하세요."
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#업캐스팅",
    "href": "posts/Numpy_Basic/numpy_basic.html#업캐스팅",
    "title": "Jung_coding",
    "section": "업캐스팅",
    "text": "업캐스팅\ndtype이 다른 배열을 합칠 때 넘파이는 (실제 값에 상관없이) 모든 값을 다룰 수 있는 타입으로 업캐스팅합니다.\n\nk1 = np.arange(0, 5, dtype=np.uint8)\nprint(k1.dtype, k1)\n\nuint8 [0 1 2 3 4]\n\n\n\nk2 = k1 + np.array([5, 6, 7, 8, 9], dtype=np.int8)\nprint(k2.dtype, k2)\n\nint16 [ 5  7  9 11 13]\n\n\n모든 int8과 uint8 값(-128에서 255까지)을 표현하기 위해 int16이 필요합니다. 이 코드에서는 uint8이면 충분하지만 업캐스팅되었습니다.\n\nk3 = k1 + 1.5\nprint(k3.dtype, k3)\n\nfloat64 [1.5 2.5 3.5 4.5 5.5]"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#ndarray-메서드",
    "href": "posts/Numpy_Basic/numpy_basic.html#ndarray-메서드",
    "title": "Jung_coding",
    "section": "ndarray 메서드",
    "text": "ndarray 메서드\n일부 함수는 ndarray 메서드로 제공됩니다. 예를 들면:\n\na = np.array([[-2.5, 3.1, 7], [10, 11, 12]])\nprint(a)\nprint(\"평균 =\", a.mean())\n\n[[-2.5  3.1  7. ]\n [10.  11.  12. ]]\n평균 = 6.766666666666667\n\n\n이 명령은 크기에 상관없이 ndarray에 있는 모든 원소의 평균을 계산합니다.\n다음은 유용한 ndarray 메서드입니다:\n\nfor func in (a.min, a.max, a.sum, a.prod, a.std, a.var):\n    print(func.__name__, \"=\", func())\n\nmin = -2.5\nmax = 12.0\nsum = 40.6\nprod = -71610.0\nstd = 5.084835843520964\nvar = 25.855555555555554\n\n\n이 함수들은 선택적으로 매개변수 axis를 사용합니다. 지정된 축을 따라 원소에 연산을 적용하는데 사용합니다. 예를 들면:\n\nc=np.arange(24).reshape(2,3,4)\nc\n\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]])\n\n\n\nc.sum(axis=0)  # 첫 번째 축을 따라 더함, 결과는 3x4 배열\n\narray([[12, 14, 16, 18],\n       [20, 22, 24, 26],\n       [28, 30, 32, 34]])\n\n\n\nc.sum(axis=1)  # 두 번째 축을 따라 더함, 결과는 2x4 배열\n\narray([[12, 15, 18, 21],\n       [48, 51, 54, 57]])\n\n\n여러 축에 대해서 더할 수도 있습니다:\n\nc.sum(axis=(0,2))  # 첫 번째 축과 세 번째 축을 따라 더함, 결과는 (3,) 배열\n\narray([ 60,  92, 124])\n\n\n\n0+1+2+3 + 12+13+14+15, 4+5+6+7 + 16+17+18+19, 8+9+10+11 + 20+21+22+23\n\n(60, 92, 124)"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#일반-함수",
    "href": "posts/Numpy_Basic/numpy_basic.html#일반-함수",
    "title": "Jung_coding",
    "section": "일반 함수",
    "text": "일반 함수\n넘파이는 일반 함수(universal function) 또는 ufunc라고 부르는 원소별 함수를 제공합니다. 예를 들면 square 함수는 원본 ndarray를 복사하여 각 원소를 제곱한 새로운 ndarray 객체를 반환합니다:\n\na = np.array([[-2.5, 3.1, 7], [10, 11, 12]])\nnp.square(a)\n\narray([[  6.25,   9.61,  49.  ],\n       [100.  , 121.  , 144.  ]])\n\n\n다음은 유용한 단항 일반 함수들입니다:\n\nprint(\"원본 ndarray\")\nprint(a)\nfor func in (np.abs, np.sqrt, np.exp, np.log, np.sign, np.ceil, np.modf, np.isnan, np.cos):\n    print(\"\\n\", func.__name__)\n    print(func(a))\n\n원본 ndarray\n[[-2.5  3.1  7. ]\n [10.  11.  12. ]]\n\n absolute\n[[ 2.5  3.1  7. ]\n [10.  11.  12. ]]\n\n sqrt\n[[       nan 1.76068169 2.64575131]\n [3.16227766 3.31662479 3.46410162]]\n\n exp\n[[8.20849986e-02 2.21979513e+01 1.09663316e+03]\n [2.20264658e+04 5.98741417e+04 1.62754791e+05]]\n\n log\n[[       nan 1.13140211 1.94591015]\n [2.30258509 2.39789527 2.48490665]]\n\n sign\n[[-1.  1.  1.]\n [ 1.  1.  1.]]\n\n ceil\n[[-2.  4.  7.]\n [10. 11. 12.]]\n\n modf\n(array([[-0.5,  0.1,  0. ],\n       [ 0. ,  0. ,  0. ]]), array([[-2.,  3.,  7.],\n       [10., 11., 12.]]))\n\n isnan\n[[False False False]\n [False False False]]\n\n cos\n[[-0.80114362 -0.99913515  0.75390225]\n [-0.83907153  0.0044257   0.84385396]]\n\n\nRuntimeWarning: invalid value encountered in sqrt\n  print(func(a))\n<ipython-input-59-d791c8e37e6f>:5: RuntimeWarning: invalid value encountered in log\n  print(func(a))"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#이항-일반-함수",
    "href": "posts/Numpy_Basic/numpy_basic.html#이항-일반-함수",
    "title": "Jung_coding",
    "section": "이항 일반 함수",
    "text": "이항 일반 함수\n두 개의 ndarray에 원소별로 적용되는 이항 함수도 많습니다. 두 배열이 동일한 크기가 아니면 브로드캐스팅 규칙이 적용됩니다:\n\na = np.array([1, -2, 3, 4])\nb = np.array([2, 8, -1, 7])\nnp.add(a, b)  # a + b 와 동일\n\narray([ 3,  6,  2, 11])\n\n\n\nnp.greater(a, b)  # a > b 와 동일\n\narray([False, False,  True, False])\n\n\n\nnp.maximum(a, b)\n\narray([2, 8, 3, 7])\n\n\n\nnp.copysign(a, b)\n\narray([ 1.,  2., -3.,  4.])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#차원-배열",
    "href": "posts/Numpy_Basic/numpy_basic.html#차원-배열",
    "title": "Jung_coding",
    "section": "1차원 배열",
    "text": "1차원 배열\n1차원 넘파이 배열은 보통의 파이썬 배열과 비슷하게 사용할 수 있습니다:\n\na = np.array([1, 5, 3, 19, 13, 7, 3])\na[3]\n\n19\n\n\n\na[2:5]\n\narray([ 3, 19, 13])\n\n\n\na[2:-1]\n\narray([ 3, 19, 13,  7])\n\n\n\na[:2]\n\narray([1, 5])\n\n\n\na[2::2]\n\narray([ 3, 13,  3])\n\n\n\na[::-1]\n\narray([ 3,  7, 13, 19,  3,  5,  1])\n\n\n물론 원소를 수정할 수 있죠:\n\na[3]=999\na\n\narray([  1,   5,   3, 999,  13,   7,   3])\n\n\n슬라이싱을 사용해 ndarray를 수정할 수 있습니다:\n\na[2:5] = [997, 998, 999]\na\n\narray([  1,   5, 997, 998, 999,   7,   3])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#보통의-파이썬-배열과-차이점",
    "href": "posts/Numpy_Basic/numpy_basic.html#보통의-파이썬-배열과-차이점",
    "title": "Jung_coding",
    "section": "보통의 파이썬 배열과 차이점",
    "text": "보통의 파이썬 배열과 차이점\n보통의 파이썬 배열과 대조적으로 ndarray 슬라이싱에 하나의 값을 할당하면 슬라이싱 전체에 복사됩니다. 위에서 언급한 브로드캐스팅 덕택입니다.\n\na[2:5] = -1\na\n\narray([ 1,  5, -1, -1, -1,  7,  3])\n\n\n또한 이런 식으로 ndarray 크기를 늘리거나 줄일 수 없습니다:\n\ntry:\n    a[2:5] = [1,2,3,4,5,6]  # 너무 길어요\nexcept ValueError as e:\n    print(e)\n\ncannot copy sequence with size 6 to array axis with dimension 3\n\n\n원소를 삭제할 수도 없습니다:\n\ntry:\n    del a[2:5]\nexcept ValueError as e:\n    print(e)\n\ncannot delete array elements\n\n\n중요한 점은 ndarray의 슬라이싱은 같은 데이터 버퍼를 바라보는 뷰(view)입니다. 슬라이싱된 객체를 수정하면 실제 원본 ndarray가 수정됩니다!\n\na_slice = a[2:6]\na_slice[1] = 1000\na  # 원본 배열이 수정됩니다!\n\narray([   1,    5,   -1, 1000,   -1,    7,    3])\n\n\n\na[3] = 2000\na_slice  # 비슷하게 원본 배열을 수정하면 슬라이싱 객체에도 반영됩니다!\n\narray([  -1, 2000,   -1,    7])\n\n\n데이터를 복사하려면 copy 메서드를 사용해야 합니다:\n\nanother_slice = a[2:6].copy()\nanother_slice[1] = 3000\na  # 원본 배열이 수정되지 않습니다\n\narray([   1,    5,   -1, 2000,   -1,    7,    3])\n\n\n\na[3] = 4000\nanother_slice  # 마찬가지로 원본 배열을 수정해도 복사된 배열은 바뀌지 않습니다\n\narray([  -1, 3000,   -1,    7])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#다차원-배열",
    "href": "posts/Numpy_Basic/numpy_basic.html#다차원-배열",
    "title": "Jung_coding",
    "section": "다차원 배열",
    "text": "다차원 배열\n다차원 배열은 비슷한 방식으로 각 축을 따라 인덱싱 또는 슬라이싱해서 사용합니다. 콤마로 구분합니다:\n\nb = np.arange(48).reshape(4, 12)\nb\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],\n       [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]])\n\n\n\nb[1, 2]  # 행 1, 열 2\n\n14\n\n\n\nb[1, :]  # 행 1, 모든 열\n\narray([12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n\n\n\nb[:, 1]  # 모든 행, 열 1\n\narray([ 1, 13, 25, 37])\n\n\n주의: 다음 두 표현에는 미묘한 차이가 있습니다:\n\nb[1, :]\n\narray([12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n\n\n\nb[1:2, :]\n\narray([[12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]])\n\n\n첫 번째 표현식은 (12,) 크기인 1D 배열로 행이 하나입니다. 두 번째는 (1, 12) 크기인 2D 배열로 같은 행을 반환합니다."
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#팬시-인덱싱fancy-indexing",
    "href": "posts/Numpy_Basic/numpy_basic.html#팬시-인덱싱fancy-indexing",
    "title": "Jung_coding",
    "section": "팬시 인덱싱(Fancy indexing)",
    "text": "팬시 인덱싱(Fancy indexing)\n관심 대상의 인덱스 리스트를 지정할 수도 있습니다. 이를 팬시 인덱싱이라고 부릅니다.\n\nb[(0,2), 2:5]  # 행 0과 2, 열 2에서 4(5-1)까지\n\narray([[ 2,  3,  4],\n       [26, 27, 28]])\n\n\n\nb[:, (-1, 2, -1)]  # 모든 행, 열 -1 (마지막), 2와 -1 (다시 반대 방향으로)\n\narray([[11,  2, 11],\n       [23, 14, 23],\n       [35, 26, 35],\n       [47, 38, 47]])\n\n\n여러 개의 인덱스 리스트를 지정하면 인덱스에 맞는 값이 포함된 1D ndarray를 반환됩니다.\n\nb[(-1, 2, -1, 2), (5, 9, 1, 9)]  # returns a 1D array with b[-1, 5], b[2, 9], b[-1, 1] and b[2, 9] (again)\n\narray([41, 33, 37, 33])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#고차원",
    "href": "posts/Numpy_Basic/numpy_basic.html#고차원",
    "title": "Jung_coding",
    "section": "고차원",
    "text": "고차원\n고차원에서도 동일한 방식이 적용됩니다. 몇 가지 예를 살펴 보겠습니다:\n\nc = b.reshape(4,2,6)\nc\n\narray([[[ 0,  1,  2,  3,  4,  5],\n        [ 6,  7,  8,  9, 10, 11]],\n\n       [[12, 13, 14, 15, 16, 17],\n        [18, 19, 20, 21, 22, 23]],\n\n       [[24, 25, 26, 27, 28, 29],\n        [30, 31, 32, 33, 34, 35]],\n\n       [[36, 37, 38, 39, 40, 41],\n        [42, 43, 44, 45, 46, 47]]])\n\n\n\nc[2, 1, 4]  # 행렬 2, 행 1, 열 4\n\n34\n\n\n\nc[2, :, 3]  # 행렬 2, 모든 행, 열 3\n\narray([27, 33])\n\n\n어떤 축에 대한 인덱스를 지정하지 않으면 이 축의 모든 원소가 반환됩니다:\n\nc[2, 1]  # 행렬 2, 행 1, 모든 열이 반환됩니다. c[2, 1, :]와 동일합니다.\n\narray([30, 31, 32, 33, 34, 35])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#생략-부호-...",
    "href": "posts/Numpy_Basic/numpy_basic.html#생략-부호-...",
    "title": "Jung_coding",
    "section": "생략 부호 (...)",
    "text": "생략 부호 (...)\n생략 부호(...)를 쓰면 모든 지정하지 않은 축의 원소를 포함합니다.\n\nc[2, ...]  #  행렬 2, 모든 행, 모든 열. c[2, :, :]와 동일\n\narray([[24, 25, 26, 27, 28, 29],\n       [30, 31, 32, 33, 34, 35]])\n\n\n\nc[2, 1, ...]  # 행렬 2, 행 1, 모든 열. c[2, 1, :]와 동일\n\narray([30, 31, 32, 33, 34, 35])\n\n\n\nc[2, ..., 3]  # 행렬 2, 모든 행, 열 3. c[2, :, 3]와 동일\n\narray([27, 33])\n\n\n\nc[..., 3]  # 모든 행렬, 모든 행, 열 3. c[:, :, 3]와 동일\n\narray([[ 3,  9],\n       [15, 21],\n       [27, 33],\n       [39, 45]])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#불리언-인덱싱",
    "href": "posts/Numpy_Basic/numpy_basic.html#불리언-인덱싱",
    "title": "Jung_coding",
    "section": "불리언 인덱싱",
    "text": "불리언 인덱싱\n불리언 값을 가진 ndarray를 사용해 축의 인덱스를 지정할 수 있습니다.\n\nb = np.arange(48).reshape(4, 12)\nb\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],\n       [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]])\n\n\n\nrows_on = np.array([True, False, True, False])\nb[rows_on, :]  # 행 0과 2, 모든 열. b[(0, 2), :]와 동일\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]])\n\n\n\ncols_on = np.array([False, True, False] * 4)\nb[:, cols_on]  # 모든 행, 열 1, 4, 7, 10\n\narray([[ 1,  4,  7, 10],\n       [13, 16, 19, 22],\n       [25, 28, 31, 34],\n       [37, 40, 43, 46]])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#np.ix_",
    "href": "posts/Numpy_Basic/numpy_basic.html#np.ix_",
    "title": "Jung_coding",
    "section": "np.ix_",
    "text": "np.ix_\n여러 축에 걸쳐서는 불리언 인덱싱을 사용할 수 없고 ix_ 함수를 사용합니다:\n\nb[np.ix_(rows_on, cols_on)]\n\narray([[ 1,  4,  7, 10],\n       [25, 28, 31, 34]])\n\n\n\nnp.ix_(rows_on, cols_on)\n\n(array([[0],\n        [2]]),\n array([[ 1,  4,  7, 10]]))\n\n\nndarray와 같은 크기의 불리언 배열을 사용하면 해당 위치가 True인 모든 원소를 담은 1D 배열이 반환됩니다. 일반적으로 조건 연산자와 함께 사용합니다:\n\nb[b % 3 == 1]\n\narray([ 1,  4,  7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#vstack",
    "href": "posts/Numpy_Basic/numpy_basic.html#vstack",
    "title": "Jung_coding",
    "section": "vstack",
    "text": "vstack\nvstack 함수를 사용하여 수직으로 쌓아보죠:\n\nq4 = np.vstack((q1, q2, q3))\nq4\n\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [3., 3., 3., 3.],\n       [3., 3., 3., 3.],\n       [3., 3., 3., 3.]])\n\n\n\nq4.shape\n\n(10, 4)\n\n\nq1, q2, q3가 모두 같은 크기이므로 가능합니다(수직으로 쌓기 때문에 수직 축은 크기가 달라도 됩니다)."
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#hstack",
    "href": "posts/Numpy_Basic/numpy_basic.html#hstack",
    "title": "Jung_coding",
    "section": "hstack",
    "text": "hstack\nhstack을 사용해 수평으로도 쌓을 수 있습니다:\n\nq5 = np.hstack((q1, q3))\nq5\n\narray([[1., 1., 1., 1., 3., 3., 3., 3.],\n       [1., 1., 1., 1., 3., 3., 3., 3.],\n       [1., 1., 1., 1., 3., 3., 3., 3.]])\n\n\n\nq5.shape\n\n(3, 8)\n\n\nq1과 q3가 모두 3개의 행을 가지고 있기 때문에 가능합니다. q2는 4개의 행을 가지고 있기 때문에 q1, q3와 수평으로 쌓을 수 없습니다:\n\ntry:\n    q5 = np.hstack((q1, q2, q3))\nexcept ValueError as e:\n    print(e)\n\nall the input array dimensions for the concatenation axis must match exactly, but along dimension 0, the array at index 0 has size 3 and the array at index 1 has size 4"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#concatenate",
    "href": "posts/Numpy_Basic/numpy_basic.html#concatenate",
    "title": "Jung_coding",
    "section": "concatenate",
    "text": "concatenate\nconcatenate 함수는 지정한 축으로도 배열을 쌓습니다.\n\nq7 = np.concatenate((q1, q2, q3), axis=0)  # vstack과 동일\nq7\n\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [3., 3., 3., 3.],\n       [3., 3., 3., 3.],\n       [3., 3., 3., 3.]])\n\n\n\nq7.shape\n\n(10, 4)\n\n\n예상했겠지만 hstack은 axis=1으로 concatenate를 호출하는 것과 같습니다."
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#stack",
    "href": "posts/Numpy_Basic/numpy_basic.html#stack",
    "title": "Jung_coding",
    "section": "stack",
    "text": "stack\nstack 함수는 새로운 축을 따라 배열을 쌓습니다. 모든 배열은 같은 크기를 가져야 합니다.\n\nq8 = np.stack((q1, q3))\nq8\n\narray([[[1., 1., 1., 1.],\n        [1., 1., 1., 1.],\n        [1., 1., 1., 1.]],\n\n       [[3., 3., 3., 3.],\n        [3., 3., 3., 3.],\n        [3., 3., 3., 3.]]])\n\n\n\nq8.shape\n\n(2, 3, 4)"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#행렬-전치",
    "href": "posts/Numpy_Basic/numpy_basic.html#행렬-전치",
    "title": "Jung_coding",
    "section": "행렬 전치",
    "text": "행렬 전치\nT 속성은 랭크가 2보다 크거나 같을 때 transpose()를 호출하는 것과 같습니다:\n\nm1 = np.arange(10).reshape(2,5)\nm1\n\narray([[0, 1, 2, 3, 4],\n       [5, 6, 7, 8, 9]])\n\n\n\nm1.T\n\narray([[0, 5],\n       [1, 6],\n       [2, 7],\n       [3, 8],\n       [4, 9]])\n\n\nT 속성은 랭크가 0이거나 1인 배열에는 아무런 영향을 미치지 않습니다:\n\nm2 = np.arange(5)\nm2\n\narray([0, 1, 2, 3, 4])\n\n\n\nm2.T\n\narray([0, 1, 2, 3, 4])\n\n\n먼저 1D 배열을 하나의 행이 있는 행렬(2D)로 바꾼다음 전치를 수행할 수 있습니다:\n\nm2r = m2.reshape(1,5)\nm2r\n\narray([[0, 1, 2, 3, 4]])\n\n\n\nm2r.T\n\narray([[0],\n       [1],\n       [2],\n       [3],\n       [4]])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#행렬-곱셈",
    "href": "posts/Numpy_Basic/numpy_basic.html#행렬-곱셈",
    "title": "Jung_coding",
    "section": "행렬 곱셈",
    "text": "행렬 곱셈\n두 개의 행렬을 만들어 dot 메서드로 행렬 곱셈을 실행해 보죠.\n\nn1 = np.arange(10).reshape(2, 5)\nn1\n\narray([[0, 1, 2, 3, 4],\n       [5, 6, 7, 8, 9]])\n\n\n\nn2 = np.arange(15).reshape(5,3)\nn2\n\narray([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11],\n       [12, 13, 14]])\n\n\n\nn1.dot(n2)\n\narray([[ 90, 100, 110],\n       [240, 275, 310]])\n\n\n주의: 앞서 언급한 것처럼 n1*n2는 행렬 곱셈이 아니라 원소별 곱셈(또는 아다마르 곱이라 부릅니다)입니다."
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#역행렬과-유사-역행렬",
    "href": "posts/Numpy_Basic/numpy_basic.html#역행렬과-유사-역행렬",
    "title": "Jung_coding",
    "section": "역행렬과 유사 역행렬",
    "text": "역행렬과 유사 역행렬\nnumpy.linalg 모듈 안에 많은 선형 대수 함수들이 있습니다. 특히 inv 함수는 정방 행렬의 역행렬을 계산합니다:\n\nimport numpy.linalg as linalg\n\nm3 = np.array([[1,2,3],[5,7,11],[21,29,31]])\nm3\n\narray([[ 1,  2,  3],\n       [ 5,  7, 11],\n       [21, 29, 31]])\n\n\n\nlinalg.inv(m3)\n\narray([[-2.31818182,  0.56818182,  0.02272727],\n       [ 1.72727273, -0.72727273,  0.09090909],\n       [-0.04545455,  0.29545455, -0.06818182]])\n\n\npinv 함수를 사용하여 유사 역행렬을 계산할 수도 있습니다:\n\nlinalg.pinv(m3)\n\narray([[-2.31818182,  0.56818182,  0.02272727],\n       [ 1.72727273, -0.72727273,  0.09090909],\n       [-0.04545455,  0.29545455, -0.06818182]])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#단위-행렬",
    "href": "posts/Numpy_Basic/numpy_basic.html#단위-행렬",
    "title": "Jung_coding",
    "section": "단위 행렬",
    "text": "단위 행렬\n행렬과 그 행렬의 역행렬을 곱하면 단위 행렬이 됩니다(작은 소숫점 오차가 있습니다):\n\nm3.dot(linalg.inv(m3))\n\narray([[ 1.00000000e+00, -1.66533454e-16,  0.00000000e+00],\n       [ 6.31439345e-16,  1.00000000e+00, -1.38777878e-16],\n       [ 5.21110932e-15, -2.38697950e-15,  1.00000000e+00]])\n\n\neye 함수는 NxN 크기의 단위 행렬을 만듭니다:\n\nnp.eye(3)\n\narray([[1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#qr-분해",
    "href": "posts/Numpy_Basic/numpy_basic.html#qr-분해",
    "title": "Jung_coding",
    "section": "QR 분해",
    "text": "QR 분해\nqr 함수는 행렬을 QR 분해합니다:\n\nq, r = linalg.qr(m3)\nq\n\narray([[-0.04627448,  0.98786672,  0.14824986],\n       [-0.23137241,  0.13377362, -0.96362411],\n       [-0.97176411, -0.07889213,  0.22237479]])\n\n\n\nr\n\narray([[-21.61018278, -29.89331494, -32.80860727],\n       [  0.        ,   0.62427688,   1.9894538 ],\n       [  0.        ,   0.        ,  -3.26149699]])\n\n\n\nq.dot(r)  # q.r는 m3와 같습니다\n\narray([[ 1.,  2.,  3.],\n       [ 5.,  7., 11.],\n       [21., 29., 31.]])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#행렬식",
    "href": "posts/Numpy_Basic/numpy_basic.html#행렬식",
    "title": "Jung_coding",
    "section": "행렬식",
    "text": "행렬식\ndet 함수는 행렬식을 계산합니다:\n\nlinalg.det(m3)  # 행렬식 계산\n\n43.99999999999997"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#고윳값과-고유벡터",
    "href": "posts/Numpy_Basic/numpy_basic.html#고윳값과-고유벡터",
    "title": "Jung_coding",
    "section": "고윳값과 고유벡터",
    "text": "고윳값과 고유벡터\neig 함수는 정방 행렬의 고윳값과 고유벡터를 계산합니다:\n\neigenvalues, eigenvectors = linalg.eig(m3)\neigenvalues # λ\n\narray([42.26600592, -0.35798416, -2.90802176])\n\n\n\neigenvectors # v\n\narray([[-0.08381182, -0.76283526, -0.18913107],\n       [-0.3075286 ,  0.64133975, -0.6853186 ],\n       [-0.94784057, -0.08225377,  0.70325518]])\n\n\n\nm3.dot(eigenvectors) - eigenvalues * eigenvectors  # m3.v - λ*v = 0\n\narray([[ 8.88178420e-15,  2.22044605e-16, -3.10862447e-15],\n       [ 3.55271368e-15,  2.02615702e-15, -1.11022302e-15],\n       [ 3.55271368e-14,  3.33413852e-15, -8.43769499e-15]])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#특잇값-분해",
    "href": "posts/Numpy_Basic/numpy_basic.html#특잇값-분해",
    "title": "Jung_coding",
    "section": "특잇값 분해",
    "text": "특잇값 분해\nsvd 함수는 행렬을 입력으로 받아 그 행렬의 특잇값 분해를 반환합니다:\n\nm4 = np.array([[1,0,0,0,2], [0,0,3,0,0], [0,0,0,0,0], [0,2,0,0,0]])\nm4\n\narray([[1, 0, 0, 0, 2],\n       [0, 0, 3, 0, 0],\n       [0, 0, 0, 0, 0],\n       [0, 2, 0, 0, 0]])\n\n\n\nU, S_diag, V = linalg.svd(m4)\nU\n\narray([[ 0.,  1.,  0.,  0.],\n       [ 1.,  0.,  0.,  0.],\n       [ 0.,  0.,  0., -1.],\n       [ 0.,  0.,  1.,  0.]])\n\n\n\nS_diag\n\narray([3.        , 2.23606798, 2.        , 0.        ])\n\n\nsvd 함수는 Σ의 대각 원소 값만 반환합니다. 전체 Σ 행렬은 다음과 같이 만듭니다:\n\nS = np.zeros((4, 5))\nS[np.diag_indices(4)] = S_diag\nS  # Σ\n\narray([[3.        , 0.        , 0.        , 0.        , 0.        ],\n       [0.        , 2.23606798, 0.        , 0.        , 0.        ],\n       [0.        , 0.        , 2.        , 0.        , 0.        ],\n       [0.        , 0.        , 0.        , 0.        , 0.        ]])\n\n\n\nV\n\narray([[-0.        ,  0.        ,  1.        , -0.        ,  0.        ],\n       [ 0.4472136 ,  0.        ,  0.        ,  0.        ,  0.89442719],\n       [-0.        ,  1.        ,  0.        , -0.        ,  0.        ],\n       [ 0.        ,  0.        ,  0.        ,  1.        ,  0.        ],\n       [-0.89442719,  0.        ,  0.        ,  0.        ,  0.4472136 ]])\n\n\n\nU.dot(S).dot(V) # U.Σ.V == m4\n\narray([[1., 0., 0., 0., 2.],\n       [0., 0., 3., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 2., 0., 0., 0.]])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#대각원소와-대각합",
    "href": "posts/Numpy_Basic/numpy_basic.html#대각원소와-대각합",
    "title": "Jung_coding",
    "section": "대각원소와 대각합",
    "text": "대각원소와 대각합\n\nnp.diag(m3)  # m3의 대각 원소입니다(왼쪽 위에서 오른쪽 아래)\n\narray([ 1,  7, 31])\n\n\n\nnp.trace(m3)  # np.diag(m3).sum()와 같습니다\n\n39"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#선형-방정식-풀기",
    "href": "posts/Numpy_Basic/numpy_basic.html#선형-방정식-풀기",
    "title": "Jung_coding",
    "section": "선형 방정식 풀기",
    "text": "선형 방정식 풀기\nsolve 함수는 다음과 같은 선형 방정식을 풉니다:\n\n\\(2x + 6y = 6\\)\n\\(5x + 3y = -9\\)\n\n\ncoeffs  = np.array([[2, 6], [5, 3]])\ndepvars = np.array([6, -9])\nsolution = linalg.solve(coeffs, depvars)\nsolution\n\narray([-3.,  2.])\n\n\nsolution을 확인해 보죠:\n\ncoeffs.dot(solution), depvars  # 네 같네요\n\n(array([ 6., -9.]), array([ 6, -9]))\n\n\n좋습니다! 다른 방식으로도 solution을 확인해 보죠:\n\nnp.allclose(coeffs.dot(solution), depvars)\n\nTrue"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#바이너리-.npy-포맷",
    "href": "posts/Numpy_Basic/numpy_basic.html#바이너리-.npy-포맷",
    "title": "Jung_coding",
    "section": "바이너리 .npy 포맷",
    "text": "바이너리 .npy 포맷\n랜덤 배열을 만들고 저장해 보죠.\n\na = np.random.rand(2,3)\na\n\narray([[0.5435938 , 0.92886307, 0.01535158],\n       [0.4157283 , 0.9102127 , 0.55129708]])\n\n\n\nnp.save(\"my_array\", a)\n\n끝입니다! 파일 이름의 확장자를 지정하지 않았기 때문에 넘파이는 자동으로 .npy를 붙입니다. 파일 내용을 확인해 보겠습니다:\n\nwith open(\"my_array.npy\", \"rb\") as f:\n    content = f.read()\n\ncontent\n\nb\"\\x93NUMPY\\x01\\x00v\\x00{'descr': '<f8', 'fortran_order': False, 'shape': (2, 3), }                                                          \\nY\\xc1\\xfc\\xd0\\x1ee\\xe1?\\xde{3\\t?\\xb9\\xed?\\x80V\\x08\\xef\\xa5p\\x8f?\\x96I}\\xe0J\\x9b\\xda?\\xe0U\\xfaav \\xed?\\xd8\\xe50\\xc59\\xa4\\xe1?\"\n\n\n이 파일을 넘파이 배열로 로드하려면 load 함수를 사용합니다:\n\na_loaded = np.load(\"my_array.npy\")\na_loaded\n\narray([[0.5435938 , 0.92886307, 0.01535158],\n       [0.4157283 , 0.9102127 , 0.55129708]])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#텍스트-포맷",
    "href": "posts/Numpy_Basic/numpy_basic.html#텍스트-포맷",
    "title": "Jung_coding",
    "section": "텍스트 포맷",
    "text": "텍스트 포맷\n배열을 텍스트 포맷으로 저장해 보죠:\n\nnp.savetxt(\"my_array.csv\", a)\n\n파일 내용을 확인해 보겠습니다:\n\nwith open(\"my_array.csv\", \"rt\") as f:\n    print(f.read())\n\n5.435937959464737235e-01 9.288630656918674955e-01 1.535157809943688001e-02\n4.157283012656532994e-01 9.102126992826775620e-01 5.512970782648904944e-01\n\n\n\n이 파일은 탭으로 구분된 CSV 파일입니다. 다른 구분자를 지정할 수도 있습니다:\n\nnp.savetxt(\"my_array.csv\", a, delimiter=\",\")\n\n이 파일을 로드하려면 loadtxt 함수를 사용합니다:\n\na_loaded = np.loadtxt(\"my_array.csv\", delimiter=\",\")\na_loaded\n\narray([[0.5435938 , 0.92886307, 0.01535158],\n       [0.4157283 , 0.9102127 , 0.55129708]])"
  },
  {
    "objectID": "posts/Numpy_Basic/numpy_basic.html#압축된-.npz-포맷",
    "href": "posts/Numpy_Basic/numpy_basic.html#압축된-.npz-포맷",
    "title": "Jung_coding",
    "section": "압축된 .npz 포맷",
    "text": "압축된 .npz 포맷\n여러 개의 배열을 압축된 한 파일로 저장하는 것도 가능합니다:\n\nb = np.arange(24, dtype=np.uint8).reshape(2, 3, 4)\nb\n\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]], dtype=uint8)\n\n\n\nnp.savez(\"my_arrays\", my_a=a, my_b=b)\n\n파일 내용을 확인해 보죠. .npz 파일 확장자가 자동으로 추가되었습니다.\n\nwith open(\"my_arrays.npz\", \"rb\") as f:\n    content = f.read()\n\nrepr(content)[:180] + \"[...]\"\n\n'b\"PK\\\\x03\\\\x04\\\\x14\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00!\\\\x00\\\\x063\\\\xcf\\\\xb9\\\\xb0\\\\x00\\\\x00\\\\x00\\\\xb0\\\\x00\\\\x00\\\\x00\\\\x08\\\\x00\\\\x14\\\\x00my_a.npy\\\\x01\\\\x00\\\\x10\\\\x00\\\\xb0\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\xb0\\\\x00\\\\x00\\\\x[...]'\n\n\n다음과 같이 이 파일을 로드할 수 있습니다:\n\nmy_arrays = np.load(\"my_arrays.npz\")\nmy_arrays\n\n<numpy.lib.npyio.NpzFile at 0x7f9791c73d60>\n\n\n게으른 로딩을 수행하는 딕셔너리와 유사한 객체입니다:\n\nmy_arrays.keys()\n\nKeysView(<numpy.lib.npyio.NpzFile object at 0x7f9791c73d60>)\n\n\n\nmy_arrays[\"my_a\"]\n\narray([[0.5435938 , 0.92886307, 0.01535158],\n       [0.4157283 , 0.9102127 , 0.55129708]])"
  },
  {
    "objectID": "posts/서울시 공공체육시설 문제 분석및 해결방안/Final_Exam.html",
    "href": "posts/서울시 공공체육시설 문제 분석및 해결방안/Final_Exam.html",
    "title": "Jung_coding",
    "section": "",
    "text": "“서울시 공공체육시설 부족현상 분석 및 해결 방안”\n\n문제점\n##### 최근 생활체육인구수가 증가하고있는 추세인반면 인구 증가 대비 적은 공공체육시설의 갯수와 기존 공공체육시설의 노후화가 문제점으로 파악. 추가적으로 서울시 내 구별 체육시설 불균형도 심각한 수준.\n\n\n“문제및 해결방법 분석순서”\n\n서울시 구별 인구수 및 공공체육시설 현황 파악\n구별 체육시설당 이용인구비율 파악을 통한 가장 심각한 구 3곳 선별\n해당 구의 공공체육시설 입지선정 방안\n\n접근성 : 대중교통을 이용한 접근성\n지가 : 해당 지역의 공시지가\n\n대중교통(지하철역)이 존재하는 동 선별\n선별된 동 중 공시지가가 낮은 순으로 선발\n각 구별 3개의 동 선별\n\n\n\n“문제점 분석”\n\nimport pandas as pd\nimport numpy as np\nimport geopandas as gpd\nimport folium\nfrom folium import Choropleth, Circle, Marker\nfrom folium.plugins import HeatMap, MarkerCluster\nimport matplotlib.pyplot as plt\nfrom shapely.geometry import Point, Polygon, LineString\nimport json\nfrom folium.features import GeoJson\nfrom shapely.geometry import Polygon\n\n\n# 데이터 파일 불러오기\n강남 = pd.read_csv(\"/Users/chojs/Desktop/data_mining_project2/1차 편집완료/강남구_예약현황.csv\", encoding='utf-8')\n강동 = pd.read_csv(\"/Users/chojs/Desktop/data_mining_project2/1차 편집완료/강동구_예약현황.csv\", encoding='utf-8')\n강서 = pd.read_csv(\"/Users/chojs/Desktop/data_mining_project2/1차 편집완료/강서구_예약현황.csv\", encoding='utf-8')\n광진 = pd.read_csv(\"/Users/chojs/Desktop/data_mining_project2/1차 편집완료/광진구_예약현황.csv\", encoding='utf-8')\n구로 = pd.read_csv(\"/Users/chojs/Desktop/data_mining_project2/1차 편집완료/구로구_예약현황.csv\", encoding='utf-8')\n동대문 = pd.read_csv(\"/Users/chojs/Desktop/data_mining_project2/1차 편집완료/동대문구_예약현황.csv\", encoding='utf-8')\n동작 = pd.read_csv(\"/Users/chojs/Desktop/data_mining_project2/1차 편집완료/동작구_예약현황.csv\", encoding='utf-8')\n마포 = pd.read_csv(\"/Users/chojs/Desktop/data_mining_project2/1차 편집완료/마포구_예약현황.csv\", encoding='utf-8')\n서초 = pd.read_csv(\"/Users/chojs/Desktop/data_mining_project2/1차 편집완료/서초구_예약현황.csv\", encoding='utf-8')\n성동 = pd.read_csv(\"/Users/chojs/Desktop/data_mining_project2/1차 편집완료/성동구_예약현황.csv\", encoding='utf-8')\n성북 = pd.read_csv(\"/Users/chojs/Desktop/data_mining_project2/1차 편집완료/성북구_예약현황.csv\", encoding='utf-8')\n송파 = pd.read_csv(\"/Users/chojs/Desktop/data_mining_project2/1차 편집완료/송파구_예약현황.csv\", encoding='utf-8')\n양천 = pd.read_csv(\"/Users/chojs/Desktop/data_mining_project2/1차 편집완료/양천구_예약현황.csv\", encoding='utf-8')\n영등포 = pd.read_csv(\"/Users/chojs/Desktop/data_mining_project2/1차 편집완료/영등포구_예약현황.csv\", encoding='utf-8')\n용산 = pd.read_csv(\"/Users/chojs/Desktop/data_mining_project2/1차 편집완료/용산구_예약현황.csv\", encoding='utf-8')\n종로 = pd.read_csv(\"/Users/chojs/Desktop/data_mining_project2/1차 편집완료/종로구_예약현황.csv\", encoding='utf-8')\n중구 = pd.read_csv(\"/Users/chojs/Desktop/data_mining_project2/1차 편집완료/중구_예약현황.csv\", encoding='utf-8')\n서울시_인구  =  pd.read_csv('/Users/chojs/Desktop/data_mining_project2/서울시_인구.csv')\n서울시_예약현황_통합  =  pd.read_csv('/Users/chojs/Desktop/data_mining_project2/서울시_예약현황_통합.csv')\n서울시_행정구역 = gpd.read_file(\"/Users/chojs/Desktop/data_mining_project2/LARD_ADM_SECT_SGG_11.shp\", encoding = 'CP949')\n서울시_공시지가 = pd.read_csv(\"/Users/chojs/Desktop/data_mining_project2/공시지가_2023년.csv\", encoding = 'CP949')\n서울시_읍면동_행정구역데이터 = gpd.read_file(\"/Users/chojs/Desktop/data_mining_project2/서울시_읍면동행정구역/LSMD_ADM_SECT_UMD_11.shp\",encoding = \"CP949\")\n\n\n/var/folders/jm/p7tw90mn0m9c_dsbyjy_sxq40000gn/T/ipykernel_3342/2190577029.py:22: DtypeWarning: Columns (3,9) have mixed types. Specify dtype option on import or set low_memory=False.\n  서울시_공시지가 = pd.read_csv(\"/Users/chojs/Desktop/data_mining_project2/공시지가_2023년.csv\", encoding = 'CP949')\n\n\n\n# 서울시 시군구 이름과 인구수가있는 csv파일\n서울시_인구\n\n\n\n\n\n  \n    \n      \n      SGG_NM\n      인구수\n    \n  \n  \n    \n      0\n      강동구\n      464027\n    \n    \n      1\n      송파구\n      663704\n    \n    \n      2\n      강남구\n      537817\n    \n    \n      3\n      서초구\n      408979\n    \n    \n      4\n      관악구\n      502628\n    \n    \n      5\n      동작구\n      390377\n    \n    \n      6\n      영등포구\n      398999\n    \n    \n      7\n      금천구\n      242467\n    \n    \n      8\n      구로구\n      417983\n    \n    \n      9\n      강서구\n      573711\n    \n    \n      10\n      양천구\n      442345\n    \n    \n      11\n      마포구\n      376542\n    \n    \n      12\n      서대문구\n      321966\n    \n    \n      13\n      은평구\n      468766\n    \n    \n      14\n      노원구\n      506989\n    \n    \n      15\n      도봉구\n      312858\n    \n    \n      16\n      강북구\n      296934\n    \n    \n      17\n      성북구\n      441855\n    \n    \n      18\n      중랑구\n      389928\n    \n    \n      19\n      동대문구\n      354884\n    \n    \n      20\n      광진구\n      350925\n    \n    \n      21\n      성동구\n      287240\n    \n    \n      22\n      용산구\n      232482\n    \n    \n      23\n      중구\n      131390\n    \n    \n      24\n      종로구\n      152212\n    \n  \n\n\n\n\n\n#서울시 구별정보와 행정구역 데이터가 polygon형태로 존재하는 shp파일\n서울시_행정구역\n\n\n\n\n\n  \n    \n      \n      ADM_SECT_C\n      SGG_NM\n      SGG_OID\n      COL_ADM_SE\n      GID\n      geometry\n    \n  \n  \n    \n      0\n      11740\n      강동구\n      NaN\n      11740\n      125\n      POLYGON ((971595.075 1952405.815, 971596.036 1...\n    \n    \n      1\n      11710\n      송파구\n      NaN\n      11710\n      126\n      POLYGON ((965821.957 1949386.153, 965816.737 1...\n    \n    \n      2\n      11680\n      강남구\n      NaN\n      11680\n      127\n      POLYGON ((959331.597 1948602.068, 959342.021 1...\n    \n    \n      3\n      11650\n      서초구\n      NaN\n      11650\n      128\n      POLYGON ((956982.039 1947144.037, 956982.518 1...\n    \n    \n      4\n      11620\n      관악구\n      NaN\n      11620\n      129\n      POLYGON ((949438.997 1944127.713, 949456.647 1...\n    \n    \n      5\n      11590\n      동작구\n      NaN\n      11590\n      130\n      POLYGON ((951811.770 1946444.671, 951885.519 1...\n    \n    \n      6\n      11560\n      영등포구\n      NaN\n      11560\n      131\n      POLYGON ((945280.001 1950949.319, 945361.246 1...\n    \n    \n      7\n      11545\n      금천구\n      NaN\n      11545\n      132\n      POLYGON ((944705.924 1943086.537, 944706.472 1...\n    \n    \n      8\n      11530\n      구로구\n      NaN\n      11530\n      133\n      POLYGON ((945165.294 1946679.190, 945362.702 1...\n    \n    \n      9\n      11500\n      강서구\n      NaN\n      11500\n      134\n      POLYGON ((939006.015 1955916.461, 939036.124 1...\n    \n    \n      10\n      11470\n      양천구\n      NaN\n      11470\n      135\n      POLYGON ((944706.568 1949917.649, 944717.625 1...\n    \n    \n      11\n      11440\n      마포구\n      NaN\n      11440\n      136\n      POLYGON ((946043.982 1954091.886, 946130.912 1...\n    \n    \n      12\n      11410\n      서대문구\n      NaN\n      11410\n      137\n      POLYGON ((951688.107 1956065.481, 951687.602 1...\n    \n    \n      13\n      11380\n      은평구\n      NaN\n      11380\n      138\n      POLYGON ((951637.438 1961851.784, 951649.915 1...\n    \n    \n      14\n      11350\n      노원구\n      NaN\n      11350\n      139\n      POLYGON ((965666.474 1959953.152, 965671.165 1...\n    \n    \n      15\n      11320\n      도봉구\n      NaN\n      11320\n      140\n      POLYGON ((957223.835 1961199.545, 957195.758 1...\n    \n    \n      16\n      11305\n      강북구\n      NaN\n      11305\n      141\n      POLYGON ((956316.789 1965175.345, 956401.551 1...\n    \n    \n      17\n      11290\n      성북구\n      NaN\n      11290\n      142\n      POLYGON ((956787.318 1953542.506, 956761.258 1...\n    \n    \n      18\n      11260\n      중랑구\n      NaN\n      11260\n      143\n      POLYGON ((965698.531 1957987.355, 965772.290 1...\n    \n    \n      19\n      11230\n      동대문구\n      NaN\n      11230\n      144\n      POLYGON ((962141.919 1956519.461, 962149.853 1...\n    \n    \n      20\n      11215\n      광진구\n      NaN\n      11215\n      145\n      POLYGON ((964825.058 1952633.250, 964875.565 1...\n    \n    \n      21\n      11200\n      성동구\n      NaN\n      11200\n      146\n      POLYGON ((959681.109 1952649.605, 959842.412 1...\n    \n    \n      22\n      11170\n      용산구\n      NaN\n      11170\n      147\n      POLYGON ((953115.761 1950834.084, 953114.206 1...\n    \n    \n      23\n      11140\n      중구\n      NaN\n      11140\n      148\n      POLYGON ((957890.386 1952616.746, 957909.908 1...\n    \n    \n      24\n      11110\n      종로구\n      NaN\n      11110\n      149\n      POLYGON ((956615.453 1953567.199, 956621.579 1...\n    \n  \n\n\n\n\n\n# 서울시_행정구역 데이터 프레임에 '인구수'라는 열을 서울시_인구수의 '인구수'열에서 가져와서 추가\n서울시_행정구역['인구수'] = 서울시_인구['인구수']\n서울시_행정구역\n\n\n\n\n\n  \n    \n      \n      ADM_SECT_C\n      SGG_NM\n      SGG_OID\n      COL_ADM_SE\n      GID\n      geometry\n      인구수\n    \n  \n  \n    \n      0\n      11740\n      강동구\n      NaN\n      11740\n      125\n      POLYGON ((971595.075 1952405.815, 971596.036 1...\n      464027\n    \n    \n      1\n      11710\n      송파구\n      NaN\n      11710\n      126\n      POLYGON ((965821.957 1949386.153, 965816.737 1...\n      663704\n    \n    \n      2\n      11680\n      강남구\n      NaN\n      11680\n      127\n      POLYGON ((959331.597 1948602.068, 959342.021 1...\n      537817\n    \n    \n      3\n      11650\n      서초구\n      NaN\n      11650\n      128\n      POLYGON ((956982.039 1947144.037, 956982.518 1...\n      408979\n    \n    \n      4\n      11620\n      관악구\n      NaN\n      11620\n      129\n      POLYGON ((949438.997 1944127.713, 949456.647 1...\n      502628\n    \n    \n      5\n      11590\n      동작구\n      NaN\n      11590\n      130\n      POLYGON ((951811.770 1946444.671, 951885.519 1...\n      390377\n    \n    \n      6\n      11560\n      영등포구\n      NaN\n      11560\n      131\n      POLYGON ((945280.001 1950949.319, 945361.246 1...\n      398999\n    \n    \n      7\n      11545\n      금천구\n      NaN\n      11545\n      132\n      POLYGON ((944705.924 1943086.537, 944706.472 1...\n      242467\n    \n    \n      8\n      11530\n      구로구\n      NaN\n      11530\n      133\n      POLYGON ((945165.294 1946679.190, 945362.702 1...\n      417983\n    \n    \n      9\n      11500\n      강서구\n      NaN\n      11500\n      134\n      POLYGON ((939006.015 1955916.461, 939036.124 1...\n      573711\n    \n    \n      10\n      11470\n      양천구\n      NaN\n      11470\n      135\n      POLYGON ((944706.568 1949917.649, 944717.625 1...\n      442345\n    \n    \n      11\n      11440\n      마포구\n      NaN\n      11440\n      136\n      POLYGON ((946043.982 1954091.886, 946130.912 1...\n      376542\n    \n    \n      12\n      11410\n      서대문구\n      NaN\n      11410\n      137\n      POLYGON ((951688.107 1956065.481, 951687.602 1...\n      321966\n    \n    \n      13\n      11380\n      은평구\n      NaN\n      11380\n      138\n      POLYGON ((951637.438 1961851.784, 951649.915 1...\n      468766\n    \n    \n      14\n      11350\n      노원구\n      NaN\n      11350\n      139\n      POLYGON ((965666.474 1959953.152, 965671.165 1...\n      506989\n    \n    \n      15\n      11320\n      도봉구\n      NaN\n      11320\n      140\n      POLYGON ((957223.835 1961199.545, 957195.758 1...\n      312858\n    \n    \n      16\n      11305\n      강북구\n      NaN\n      11305\n      141\n      POLYGON ((956316.789 1965175.345, 956401.551 1...\n      296934\n    \n    \n      17\n      11290\n      성북구\n      NaN\n      11290\n      142\n      POLYGON ((956787.318 1953542.506, 956761.258 1...\n      441855\n    \n    \n      18\n      11260\n      중랑구\n      NaN\n      11260\n      143\n      POLYGON ((965698.531 1957987.355, 965772.290 1...\n      389928\n    \n    \n      19\n      11230\n      동대문구\n      NaN\n      11230\n      144\n      POLYGON ((962141.919 1956519.461, 962149.853 1...\n      354884\n    \n    \n      20\n      11215\n      광진구\n      NaN\n      11215\n      145\n      POLYGON ((964825.058 1952633.250, 964875.565 1...\n      350925\n    \n    \n      21\n      11200\n      성동구\n      NaN\n      11200\n      146\n      POLYGON ((959681.109 1952649.605, 959842.412 1...\n      287240\n    \n    \n      22\n      11170\n      용산구\n      NaN\n      11170\n      147\n      POLYGON ((953115.761 1950834.084, 953114.206 1...\n      232482\n    \n    \n      23\n      11140\n      중구\n      NaN\n      11140\n      148\n      POLYGON ((957890.386 1952616.746, 957909.908 1...\n      131390\n    \n    \n      24\n      11110\n      종로구\n      NaN\n      11110\n      149\n      POLYGON ((956615.453 1953567.199, 956621.579 1...\n      152212\n    \n  \n\n\n\n\n\n#서울시_행정구역에 '인구수'데이터가 정확히 추가되었는지 확인\n서울시_행정구역.columns\n\nIndex(['ADM_SECT_C', 'SGG_NM', 'SGG_OID', 'COL_ADM_SE', 'GID', 'geometry',\n       '인구수'],\n      dtype='object')\n\n\n\n#서울시 공공체육시설 리스트\n서울시_예약현황_통합\n\n\n\n\n\n  \n    \n      \n      대분류명\n      소분류명\n      서비스상태\n      서비스명\n      결제방법\n      장소명\n      서비스대상\n      longitude\n      latitude\n    \n  \n  \n    \n      0\n      체육시설\n      테니스장\n      접수중\n      탄천센터 테니스장 1면(일원1,개포3동 주민 대상)\n      무료\n      서울물재생시설공단>탄천물재생센터\n      제한없음\n      127.079371\n      37.496831\n    \n    \n      1\n      체육시설\n      테니스장\n      접수중\n      탄천센터 테니스장 2면(일원1,개포3동 주민 대상)\n      무료\n      서울물재생시설공단>탄천물재생센터\n      제한없음\n      127.079371\n      37.496831\n    \n    \n      2\n      체육시설\n      족구장\n      접수중\n      에코파크 족구장 1면\n      무료\n      에코파크\n      제한없음\n      127.088178\n      37.495188\n    \n    \n      3\n      체육시설\n      풋살장\n      접수중\n      에코파크 풋살장\n      무료\n      에코파크\n      제한없음\n      127.088178\n      37.495188\n    \n    \n      4\n      체육시설\n      족구장\n      접수중\n      에코파크 족구장 2면\n      무료\n      에코파크\n      제한없음\n      127.088178\n      37.495188\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      644\n      체육시설\n      테니스장\n      예약마감\n      6월 장충 테니스장 5번코트 (주말)\n      유료\n      장충테니스장\n      제한없음\n      127.001672\n      37.554006\n    \n    \n      645\n      체육시설\n      테니스장\n      예약마감\n      6월 장충 테니스장 6번코트 (주말)\n      유료\n      장충테니스장\n      제한없음\n      127.001672\n      37.554006\n    \n    \n      646\n      체육시설\n      테니스장\n      예약마감\n      6월 장충 테니스장 7번코트 (주말)\n      유료\n      장충테니스장\n      제한없음\n      127.001672\n      37.554006\n    \n    \n      647\n      체육시설\n      테니스장\n      예약마감\n      6월 장충 테니스장 8번코트 (주말)\n      유료\n      장충테니스장\n      제한없음\n      127.001672\n      37.554006\n    \n    \n      648\n      체육시설\n      테니스장\n      예약마감\n      6월 장충 테니스장 9번코트 (주말)\n      유료\n      장충테니스장\n      제한없음\n      127.001672\n      37.554006\n    \n  \n\n649 rows × 9 columns\n\n\n\n\n#서울시를 중심으로 하고있는 Folium map 생성\n\nseoul_map = folium.Map(location=[37.5665, 126.9780], \n                 zoom_start=11, control_scale=True)\nseoul_map\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n# seoul map에 각 구별 인구수에 따른 색갈로 표시하기 위한 함수 생성\ndef field_type_colour(feature):\n    population = feature['properties']['인구수']\n    max_population = max(서울시_행정구역['인구수'])\n    min_population = min(서울시_행정구역['인구수'])\n    brightness = int((max_population-population) / (max_population - min_population) * 255)\n    color = (0,brightness,0)  \n    return '#{:02x}{:02x}{:02x}'.format(*color)\n\n\n# seoul_map에 Tooltip추가\nfolium.GeoJson(서울시_행정구역,\n               tooltip=folium.GeoJsonTooltip(fields=['SGG_NM',\n                                                     '인구수']),\n                style_function= lambda feature: {'fillColor':field_type_colour(feature), \n                                                 'fillOpacity':0.9, 'color': 'white','weight':1}).add_to(seoul_map)\n\nseoul_map\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n# 서울시 구별 공공체육시설 위치를 MakerCluster를 이용해 제작\n\n서울시_예약현황_통합 = 서울시_예약현황_통합.rename(columns={'장소X좌표' : 'longitude', '장소Y좌표' : 'latitude'})\n\n# MarkerCluster 생성\nmarker_cluster = MarkerCluster().add_to(seoul_map)\n\n# 데이터프레임의 각 행을 반복하면서 마커를 추가\nfor index, row in 서울시_예약현황_통합.iterrows():\n    location = (row['latitude'], row['longitude'])\n    folium.Marker(location=location, popup=row['장소명']).add_to(marker_cluster)\n\nseoul_map\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n# 서울시 인구수 및 체육시설수의 각각 의 barplot\n\n#서울시 구별 인구 그래프\n\n# 폰트 설정\nplt.rc('font', family='AppleGothic')\nplt.rcParams['axes.unicode_minus'] = False\n\n# 그래프 그리기\nax = 서울시_인구.plot.barh()\n\n# Y축의 이름 설정\nax.set_yticklabels(서울시_인구['SGG_NM'])\n\n\n# x축의 이름 추가\nax.set_xlabel('인구수')\n\n# 그래프의 제목 추가\nax.set_title('서울시 구별 인구 그래프')\n\n# 그래프 출력\nplt.show()\n\n\n\n\n\n#서울시 구별 체육시설 수 그래프\n\n#인구수 데이터에 구별 공공체육시설 갯수를 열을 새로 만들어서 추가\n\ndf = {'SGG_NM' : ['강동구','송파구','강남구','서초구','관악구','동작구','영등포구','금천구','구로구','강서구','양천구','마포구','서대문구','은평구','노원구','도봉구','강북구','성북구','중랑구','동대문구','광진구','성동구','용산구','중구','종로구'],\n              '체육시설갯수' : [52,60,14,82,0,53,11,0,57,35,15,46,0,0,0,0,0,54,0,6,44,29,42,37,12]}\n서울시_구별_체육시설갯수 = pd.DataFrame(df)\n서울시_인구['체육시설갯수'] = 서울시_구별_체육시설갯수['체육시설갯수']\n서울시_인구\n\n# 폰트 설정\nplt.rc('font', family='AppleGothic')\nplt.rcParams['axes.unicode_minus'] = False\n\n# 그래프 그리기\nax = 서울시_인구['체육시설갯수'].plot.barh()\n\n# Y축의 이름 설정\nax.set_yticklabels(서울시_인구['SGG_NM'])\n\n\n# x축의 이름 추가\nax.set_xlabel('체육시설수')\n\n# 그래프의 제목 추가\nax.set_title('서울시 구별 체육시설수')\n\n# 그래프 출력\nplt.show()\n\n\n\n\n\n# 서울시 구별 체육시설 개당 이용인구수 비율\n\n# 서울시_인구 데이터 프레임에 '비율'이라는 열을 새로 만들고 numpy를 이용해서 인구수를 체육시설수로 나눠줌\n서울시_인구['비율'] = np.divide(서울시_인구['인구수'], 서울시_인구['체육시설갯수'])\n\n#서울시 구별 체육시설 1개당 이용자 수 비율\n\n# 폰트 설정\nplt.rc('font', family='AppleGothic')\nplt.rcParams['axes.unicode_minus'] = False\n\n# 그래프 그리기\nax = 서울시_인구['비율'].plot.barh()\n\n# Y축의 이름 설정\nax.set_yticklabels(서울시_인구['SGG_NM'])\n\n\n# x축의 이름 추가\nax.set_xlabel('이용자수')\n\n# 그래프의 제목 추가\nax.set_title('서울시 구별 체육시설 1개당 이용인구수 비율')\n\n# 그래프 출력\nplt.show()\n\n\n\n\n위의 지도와 그래프를 통해서 인구수와 공공체육시설의 갯수가 비레하지 않다는 것을 알 수 있고 서울시 25개의 구중에 8개의구(중랑, 강북, 도봉, 노원, 은평, 서대문, 금천, 관악)는 공공체육시설이 존재하지 않으며 공공체육시설 1개당 이용인구 비율을 보면 동대문구, 강남구, 영등포구순으로 심각함을 나타내고 있음을 알 수 있다.\n\n\n공공체육시설 입지선정 우선순위\n\n접근성\n\n대중교통(지하철)을 이용한 접근성\n\n지가\n\n해당지역의 공시지가\n\n\n\n#서울시 지하철 데이터 불러오기\n서울시_지하철_위치_좌표 = pd.read_csv(\"/Users/chojs/Desktop/data_mining_project2/서울교통공사_1_8호선 역사 좌표(위경도) 정보_20211231.csv\",encoding=\"CP949\")\n서울시_지하철_위치_좌표\n\n\n\n\n\n  \n    \n      \n      연번\n      호선\n      고유역번호(외부역코드)\n      역명\n      위도\n      경도\n      작성일자\n    \n  \n  \n    \n      0\n      1\n      1\n      150\n      서울\n      37.553150\n      126.972533\n      1974-02-28\n    \n    \n      1\n      2\n      1\n      151\n      시청\n      37.563590\n      126.975407\n      1974-08-15\n    \n    \n      2\n      3\n      1\n      152\n      종각\n      37.570203\n      126.983116\n      1974-08-15\n    \n    \n      3\n      4\n      1\n      153\n      종로3가\n      37.570429\n      126.992095\n      1974-08-15\n    \n    \n      4\n      5\n      1\n      154\n      종로5가\n      37.570971\n      127.001900\n      1974-03-31\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      271\n      272\n      8\n      2823\n      남한산성입구\n      37.451568\n      127.159845\n      1996-10-31\n    \n    \n      272\n      273\n      8\n      2824\n      단대오거리\n      37.445057\n      127.156735\n      1996-12-28\n    \n    \n      273\n      274\n      8\n      2825\n      신흥\n      37.440952\n      127.147590\n      1996-12-28\n    \n    \n      274\n      275\n      8\n      2826\n      수진\n      37.437575\n      127.140936\n      1996-12-28\n    \n    \n      275\n      276\n      8\n      2827\n      모란\n      37.433888\n      127.129921\n      1996-11-30\n    \n  \n\n276 rows × 7 columns\n\n\n\n\n#서울시 읍면동의 정보 및 행정구역 데이터 불러오기\n서울시_읍면동_행정구역데이터\n\n\n\n\n\n  \n    \n      \n      EMD_CD\n      EMD_NM\n      SGG_OID\n      COL_ADM_SE\n      GID\n      geometry\n    \n  \n  \n    \n      0\n      11110154\n      장사동\n      4315\n      11110\n      3037\n      POLYGON ((955438.037 1952426.894, 955438.325 1...\n    \n    \n      1\n      11110153\n      돈의동\n      4314\n      11110\n      3038\n      POLYGON ((955054.604 1952786.670, 955055.964 1...\n    \n    \n      2\n      11290134\n      길음동\n      4532\n      11290\n      2820\n      POLYGON ((957364.694 1957374.485, 957376.240 1...\n    \n    \n      3\n      11290133\n      정릉동\n      4531\n      11290\n      2821\n      POLYGON ((957598.059 1956308.659, 957583.162 1...\n    \n    \n      4\n      11290132\n      보문동3가\n      4530\n      11290\n      2822\n      POLYGON ((957323.502 1954285.821, 957323.592 1...\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      464\n      11680107\n      신사동\n      1050\n      11680\n      2654\n      MULTIPOLYGON (((957392.555 1947055.361, 957582...\n    \n    \n      465\n      11680106\n      대치동\n      1215\n      11680\n      2655\n      POLYGON ((960137.158 1945122.806, 960275.714 1...\n    \n    \n      466\n      11680105\n      삼성동\n      1184\n      11680\n      2656\n      POLYGON ((959462.166 1946535.406, 959468.699 1...\n    \n    \n      467\n      11260106\n      신내동\n      50\n      11260\n      5312\n      POLYGON ((966169.085 1956671.479, 966095.065 1...\n    \n    \n      468\n      11260105\n      망우동\n      51\n      11260\n      5313\n      POLYGON ((964287.419 1955635.516, 964288.290 1...\n    \n  \n\n469 rows × 6 columns\n\n\n\n\n# 동대문구의 지하철역\n\n# 서울 중심의 지도 생성\n동대문_map = folium.Map(location=[37.5724, 127.0345], zoom_start=13)\n\n서울시_읍면동_행정구역데이터\n\nfolium.GeoJson(서울시_행정구역,\n               tooltip=folium.GeoJsonTooltip(fields=['SGG_NM'])\n               ).add_to(동대문_map)\n\nfolium.GeoJson(서울시_읍면동_행정구역데이터,\n               tooltip=folium.GeoJsonTooltip(fields=['EMD_NM'])\n                ).add_to(동대문_map)\n\ncolors = ['blue', 'green', 'orange', 'lightblue', 'purple', 'beige', 'darkgreen', 'pink'] \n# 색상 지정\ncolor_dict = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'lightblue',\n    5:'purple',\n    6:'beige',\n    7:'darkgreen',\n    8:'pink'\n}\n\n# 데이터프레임의 각 행을 순회하면서 마커 생성 및 색상 지정\nfor index, row in 서울시_지하철_위치_좌표.iterrows():\n    lat = row['위도']\n    lon = row['경도']\n    line = row['호선']\n    color = color_dict.get(line, 'gray')  # 호선에 해당하는 색상을 가져오고, 없을 경우 기본 색상인 'gray'를 사용\n    marker = folium.CircleMarker(location=[lat, lon], color=color, fill=True, fill_color=color)\n    marker.add_to(동대문_map)\n\n# 지도 출력\n동대문_map\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n# 강남문구의 지하철역\n\n# 서울 중심의 지도 생성\n강남_map = folium.Map(location=[37.495985, 127.066409], zoom_start=13)\n\n서울시_지하철_위치_좌표\n\nfolium.GeoJson(서울시_행정구역,\n               tooltip=folium.GeoJsonTooltip(fields=['SGG_NM'])\n                ).add_to(강남_map)\n\ncolors = ['blue', 'green', 'orange', 'lightblue', 'purple', 'beige', 'darkgreen', 'pink'] \n# 색상 지정\ncolor_dict = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'lightblue',\n    5:'purple',\n    6:'beige',\n    7:'darkgreen',\n    8:'pink'\n}\n\n# 데이터프레임의 각 행을 순회하면서 마커 생성 및 색상 지정\nfor index, row in 서울시_지하철_위치_좌표.iterrows():\n    lat = row['위도']\n    lon = row['경도']\n    line = row['호선']\n    color = color_dict.get(line, 'gray')  # 호선에 해당하는 색상을 가져오고, 없을 경우 기본 색상인 'gray'를 사용\n    marker = folium.CircleMarker(location=[lat, lon], color=color, fill=True, fill_color=color)\n    marker.add_to(강남_map)\n\n# 지도 출력\n강남_map\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n# 영등포구의 지하철역\n\n# 서울 중심의 지도 생성\n영등포_map = folium.Map(location=[37.5206, 126.9139], zoom_start=13)\n\n서울시_지하철_위치_좌표\n\nfolium.GeoJson(서울시_행정구역,\n               tooltip=folium.GeoJsonTooltip(fields=['SGG_NM'])\n                ).add_to(영등포_map)\n\ncolors = ['blue', 'green', 'orange', 'lightblue', 'purple', 'beige', 'darkgreen', 'pink'] \n# 색상 지정\ncolor_dict = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'lightblue',\n    5:'purple',\n    6:'beige',\n    7:'darkgreen',\n    8:'pink'\n}\n\n# 데이터프레임의 각 행을 순회하면서 마커 생성 및 색상 지정\nfor index, row in 서울시_지하철_위치_좌표.iterrows():\n    lat = row['위도']\n    lon = row['경도']\n    line = row['호선']\n    color = color_dict.get(line, 'gray')  # 호선에 해당하는 색상을 가져오고, 없을 경우 기본 색상인 'gray'를 사용\n    marker = folium.CircleMarker(location=[lat, lon], color=color, fill=True, fill_color=color)\n    marker.add_to(영등포_map)\n\n# 지도 출력\n영등포_map\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n동대문구 : 신설동 : 신설동역(1,2호선) 용두동 : 용두역(2호선),제기동역(1호선) 제기동 : 제기동역(1호선), 고려대역(6호선) 청량리동 : 청량리역(1호선) 전농동 : 청량리역(1호선) 답십리동 : 답십리역(5호선) 장안동 : 장안동역(5호선)\n강남구 : 압구정동 : 압구정역(3호선) 신사동 : 압구정, 신사역(3호선) 논현동 : 신사역(3호선),논현,학동,강남구청역(7호선) 청담동 : 강남구청, 청담역(7호선) 삼성동 : 삼성역(2호선), 강남구청, 청담역(7호선) 역삼동 : 강남, 역삼, 선릉역(2호선) 대치동 : 삼성역(2호선),도곡, 대치, 학여울(3호선) 도곡동 : 양재, 매봉, 도곡역(3호선) 개포동 : 대청역(3호선) 일원동 : 대청, 일원역(3호선) 수서동 : 수서역(3호선)\n영등포구 : 여의도동 : 여의도, 여의나루역(5호선) 당산동 2가 : 영등포구청역(5호선) 당산동 3가 : 영등포구청역(2,5호선) 당산동 5가 : 당산역(2호선) 당산동 6가 : 당산역(2호선) 양평동 1가 : 양평역(5호선) 양평동 2가 : 양평역(5호선) 양평동 3가 : 양평역(5호선) 영등포동 1가 : 신길역(5호선) 영등포동 5가 : 영등포시장역(5호선) 영등포동 6가 : 영등포시장역(5호선) 영등포동 7가 : 영등포시장역(5호선) 문래동 3가 : 문래역(2호선) 대림동 : 대림역(2, 7호선) 신길동 : 신풍, 보라매역(7호선)\n\n이렇게 각 구별 지하철이 지나가는 동을 알 수 있고 위의 동별 공시지가의 평균을 구해 입지선정 예정\n\n#데이터 편집\n동대문구_행정구역 = 서울시_읍면동_행정구역데이터[서울시_읍면동_행정구역데이터['COL_ADM_SE'] == '11230']\n강남구_행정구역 = 서울시_읍면동_행정구역데이터[서울시_읍면동_행정구역데이터['COL_ADM_SE'] == '11680']\n영등포구_행정구역 = 서울시_읍면동_행정구역데이터[서울시_읍면동_행정구역데이터['COL_ADM_SE'] == '11560']\n동대문_강남_영등포_행정구역 = 동대문구_행정구역.append([강남구_행정구역, 영등포구_행정구역], ignore_index=True)\n공시지가 = {'공시지가(원/㎥)' : [3.568119e+06,3.416856e+06,4.013368e+06,3.835315e+06,3.955629e+06,3.566845e+06,3.757580e+06,3.534084e+06,4.329312e+06,4.358127e+06,\n                       1.676767e+07,5.359631e+06,1.475273e+07,9.312725e+06,2.957602e+06,5.299698e+06,1.928975e+06,2.410088e+06,1.738360e+06,1.498457e+07,1.215576e+07,1.741184e+07,1.345849e+07,1.612344e+07,\n                       4.086000e+05,3.625071e+06,3.552993e+06,6.337035e+05,3.851203e+06,4.695798e+06,5.191544e+06,4.174048e+06,4.153437e+06,5.155501e+06,4.220059e+06,2.882079e+06,4.577645e+06,5.141035e+06,4.613340e+06,4.031965e+06,2.844118e+06,2.891924e+06,4.459253e+06,5.061696e+06,4.787559e+06,5.556057e+06,6.545419e+06,8.053489e+06,1.021216e+07,1.390664e+07,6.656528e+06,5.703752e+06,5.292404e+06,4.837693e+06,1.274824e+07,5.110353e+06,5.600117e+06,3.588765e+06]}\n공시지가_종합 = pd.DataFrame(공시지가)\n동대문_강남_영등포_행정구역['공시지가(원/㎥)'] = 공시지가_종합['공시지가(원/㎥)']\n지하철_지나가는_동 = 동대문_강남_영등포_행정구역.loc[[3,4,5,6,7,8,9,10,11,12,13,14,15,19,20,21,23,22,33,32,31,44,43,52,51,54,56,47,46,45,37,25,26],:]\n지하철_지나가는_동\n\n/var/folders/jm/p7tw90mn0m9c_dsbyjy_sxq40000gn/T/ipykernel_3342/1542659634.py:5: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  동대문_강남_영등포_행정구역 = 동대문구_행정구역.append([강남구_행정구역, 영등포구_행정구역], ignore_index=True)\n\n\n\n\n\n\n  \n    \n      \n      EMD_CD\n      EMD_NM\n      SGG_OID\n      COL_ADM_SE\n      GID\n      geometry\n      공시지가(원/㎥)\n    \n  \n  \n    \n      3\n      11230107\n      청량리동\n      4489\n      11230\n      2863\n      POLYGON ((960067.768 1954564.967, 960068.214 1...\n      3835315.0\n    \n    \n      4\n      11230106\n      장안동\n      4488\n      11230\n      2864\n      POLYGON ((962496.602 1953596.962, 962496.864 1...\n      3955629.0\n    \n    \n      5\n      11230105\n      답십리동\n      4487\n      11230\n      2865\n      POLYGON ((960729.280 1953022.073, 960729.804 1...\n      3566845.0\n    \n    \n      6\n      11230104\n      전농동\n      4486\n      11230\n      2866\n      POLYGON ((960729.280 1953022.073, 960728.422 1...\n      3757580.0\n    \n    \n      7\n      11230103\n      제기동\n      4485\n      11230\n      2867\n      POLYGON ((959437.842 1954767.759, 959440.291 1...\n      3534084.0\n    \n    \n      8\n      11230102\n      용두동\n      4484\n      11230\n      2868\n      POLYGON ((958185.220 1953567.764, 958190.101 1...\n      4329312.0\n    \n    \n      9\n      11230101\n      신설동\n      4483\n      11230\n      2869\n      POLYGON ((958006.570 1953418.018, 958008.337 1...\n      4358127.0\n    \n    \n      10\n      11680104\n      청담동\n      4695\n      11680\n      2657\n      POLYGON ((959934.756 1948388.974, 959935.285 1...\n      16767670.0\n    \n    \n      11\n      11680103\n      개포동\n      1111\n      11680\n      2658\n      POLYGON ((962767.783 1944323.359, 962786.843 1...\n      5359631.0\n    \n    \n      12\n      11680101\n      역삼동\n      4693\n      11680\n      2659\n      POLYGON ((960137.165 1945122.850, 960156.153 1...\n      14752730.0\n    \n    \n      13\n      11680118\n      도곡동\n      1056\n      11680\n      2646\n      POLYGON ((958593.221 1943470.484, 958616.585 1...\n      9312725.0\n    \n    \n      14\n      11680115\n      수서동\n      1203\n      11680\n      2647\n      POLYGON ((964411.951 1944068.828, 964415.416 1...\n      2957602.0\n    \n    \n      15\n      11680114\n      일원동\n      1204\n      11680\n      2648\n      POLYGON ((964411.951 1944068.828, 964390.680 1...\n      5299698.0\n    \n    \n      19\n      11680110\n      압구정동\n      1049\n      11680\n      2652\n      POLYGON ((957027.864 1947810.500, 956989.636 1...\n      14984570.0\n    \n    \n      20\n      11680108\n      논현동\n      1183\n      11680\n      2653\n      POLYGON ((959686.454 1945763.984, 959679.043 1...\n      12155760.0\n    \n    \n      21\n      11680107\n      신사동\n      1050\n      11680\n      2654\n      MULTIPOLYGON (((957392.555 1947055.361, 957582...\n      17411840.0\n    \n    \n      23\n      11680105\n      삼성동\n      1184\n      11680\n      2656\n      POLYGON ((959462.166 1946535.406, 959468.699 1...\n      16123440.0\n    \n    \n      22\n      11680106\n      대치동\n      1215\n      11680\n      2655\n      POLYGON ((960137.158 1945122.806, 960275.714 1...\n      13458490.0\n    \n    \n      33\n      11560125\n      양평동1가\n      4661\n      11560\n      2691\n      POLYGON ((946242.023 1947007.458, 946241.074 1...\n      5155501.0\n    \n    \n      32\n      11560126\n      양평동2가\n      4662\n      11560\n      2690\n      POLYGON ((945655.273 1946988.325, 945654.791 1...\n      4153437.0\n    \n    \n      31\n      11560127\n      양평동3가\n      4663\n      11560\n      2689\n      POLYGON ((945481.594 1947600.461, 945487.647 1...\n      4174048.0\n    \n    \n      44\n      11560114\n      당산동4가\n      4650\n      11560\n      2702\n      POLYGON ((947231.269 1947575.041, 947230.965 1...\n      4787559.0\n    \n    \n      43\n      11560115\n      당산동5가\n      4651\n      11560\n      2701\n      POLYGON ((946908.499 1948613.002, 946920.159 1...\n      5061696.0\n    \n    \n      52\n      11560112\n      당산동2가\n      4648\n      11560\n      2704\n      POLYGON ((946602.301 1947125.631, 946602.093 1...\n      5292404.0\n    \n    \n      51\n      11560113\n      당산동3가\n      34\n      11560\n      2703\n      POLYGON ((947224.641 1947574.017, 947214.736 1...\n      5703752.0\n    \n    \n      54\n      11560110\n      여의도동\n      4646\n      11560\n      2706\n      POLYGON ((948901.667 1949279.710, 948920.971 1...\n      12748240.0\n    \n    \n      56\n      11560102\n      영등포동1가\n      4638\n      11560\n      2714\n      POLYGON ((948160.232 1946750.008, 948160.750 1...\n      5600117.0\n    \n    \n      47\n      11560106\n      영등포동5가\n      4642\n      11560\n      2710\n      POLYGON ((947702.933 1946912.967, 947702.097 1...\n      8053489.0\n    \n    \n      46\n      11560107\n      영등포동6가\n      4643\n      11560\n      2709\n      POLYGON ((947411.297 1946982.363, 947409.421 1...\n      6545419.0\n    \n    \n      45\n      11560108\n      영등포동7가\n      4644\n      11560\n      2708\n      POLYGON ((947963.123 1947606.181, 947977.840 1...\n      5556057.0\n    \n    \n      37\n      11560121\n      문래동3가\n      4657\n      11560\n      2695\n      POLYGON ((946787.686 1946182.082, 946730.058 1...\n      5141035.0\n    \n    \n      25\n      11560133\n      대림동\n      4669\n      11560\n      2683\n      POLYGON ((946692.526 1945328.738, 946692.865 1...\n      3625071.0\n    \n    \n      26\n      11560132\n      신길동\n      4668\n      11560\n      2684\n      POLYGON ((948588.845 1946726.963, 948633.641 1...\n      3552993.0\n    \n  \n\n\n\n\n\n#지하철이 지나가는 각 동들의 공시지가\n지하철_동_공시지가_지도 = folium.Map(location=[37.5665, 126.9780], \n                 zoom_start=11, control_scale=True)\n\n\ndef field_type_colour(feature):\n    population = feature['properties']['공시지가(원/㎥)']\n    max_population = max(지하철_지나가는_동['공시지가(원/㎥)'])\n    min_population = min(지하철_지나가는_동['공시지가(원/㎥)'])\n    brightness = int((max_population-population) / (max_population - min_population) * 255)\n    color = (brightness,0,0)  # 색상 값 (빨강 채널)\n    return '#{:02x}{:02x}{:02x}'.format(*color)\n\n\n\n\nfolium.GeoJson(지하철_지나가는_동,\n               tooltip=folium.GeoJsonTooltip(fields=['EMD_NM','공시지가(원/㎥)']),\n                style_function= lambda feature: {'fillColor':field_type_colour(feature), \n                                                 'fillOpacity':0.9, 'color': 'white','weight':1}).add_to(지하철_동_공시지가_지도)\n\n\n지하철_동_공시지가_지도\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n# 서울 중심의 지도 생성\nm = folium.Map(location=[37.5665, 126.9780], \n                 zoom_start=11, control_scale=True)\n\n\ndef field_type_colour(feature):\n    population = feature['properties']['공시지가(원/㎥)']\n    max_population = max(동대문_강남_영등포_행정구역['공시지가(원/㎥)'])\n    min_population = min(동대문_강남_영등포_행정구역['공시지가(원/㎥)'])\n    brightness = int((max_population-population) / (max_population - min_population) * 255)\n    color = (brightness,0,0)  # 색상 값 (빨강 채널)\n    return '#{:02x}{:02x}{:02x}'.format(*color)\n\n\n\n\nfolium.GeoJson(동대문_강남_영등포_행정구역,\n               tooltip=folium.GeoJsonTooltip(fields=['EMD_NM','공시지가(원/㎥)']),\n                style_function= lambda feature: {'fillColor':field_type_colour(feature), \n                                                 'fillOpacity':0.9, 'color': 'white','weight':1}).add_to(m)\n\n\n\n\ncolors = ['blue', 'green', 'orange', 'lightblue', 'purple', 'beige', 'darkgreen', 'pink'] \n# 색상 지정\ncolor_dict = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'lightblue',\n    5:'purple',\n    6:'beige',\n    7:'darkgreen',\n    8:'pink'\n}\n\n# 데이터프레임의 각 행을 순회하면서 마커 생성 및 색상 지정\nfor index, row in 서울시_지하철_위치_좌표.iterrows():\n    lat = row['위도']\n    lon = row['경도']\n    line = row['호선']\n    color = color_dict.get(line, 'gray')  # 호선에 해당하는 색상을 가져오고, 없을 경우 기본 색상인 'gray'를 사용\n    marker = folium.CircleMarker(location=[lat, lon], color=color, fill=True, fill_color=color)\n    marker.add_to(m)\n\ncolor_dict = {\n    1: 'blue',\n    2: 'green',\n    3: 'orange',\n    4: 'lightblue',\n    5:'purple',\n    6:'beige',\n    7:'darkgreen',\n    8:'pink'\n}\n\n\nm\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n동대문구 : 제기동 : 3,534,084 답십리동 : 3,566,845 전농동 : 3,757,580 청량리동 : 3,835,315 장안동 : 3,955,629 용두동 : 4,329,312 신설동 : 4,358,127\n강남구 : 수서동 : 2,957,602 일원동 : 5,299,698 개포동 : 5,359,631 도곡동 : 9,312,725 논현동 : 12,155,760 대치동 : 13,458,490 역삼동 : 14,752,730 압구정동 : 14,984,570 삼성동 : 16,123,440 청담동 : 16,767,670 신사동 : 17,411,840\n영등포구 : 신길동 : 3,552,993 대림동 : 3,625,071 양평동 2가 : 4,153,437 양평동 3가 : 4,174,048 당산동 6가 : 4,459,253 당산동 5가 : 5,061,696 문래동 3가 : 5,141,035 양평동 1가 : 5,155,501 당산동 2가 : 5,292,404 영등포동 7가 : 5,556,057 영등포동 1가 : 5,600,117 당산동 3가 : 5,703,752 영등포동 6가 : 6,545,419 영등포동 5가 : 8,053,489 여의도동 : 12,748,240\n\n단위 : 원/㎡\n이렇게 동대문구에서의 Top3는 제기동, 답십리동, 전농동 강남구에서는 수서동, 일원동, 개포동 영등포구에서는 신길동, 대림동, 양평동 2가인것을 알 수 있습니다\n\n# 지도 생성\nm = folium.Map(location=[37.5665, 126.9780], zoom_start=11, control_scale=True)\n\n# 스타일 함수 정의\ndef style_function(feature):\n    # 특정 지역의 이름으로 색상을 구분하여 스타일을 지정\n    if feature['properties']['EMD_NM'] in ['답십리동','전농동','제기동','개포동','수서동','일원동','대림동','신길동','양평동2가']:\n        return {\n            'fillColor': 'blue',  # 채우는 색상\n            'color': 'blue',  # 테두리 색상\n            'weight': 1,  # 테두리 두께\n            'fillOpacity': 0.7,  # 채우는 영역의 투명도\n        }\n    else:\n        return {\n            'fillColor': 'gray',  # 채우는 색상\n            'color': 'gray',  # 테두리 색상\n            'weight': 1,  # 테두리 두께\n            'fillOpacity': 0.3,  # 채우는 영역의 투명도\n        }\n\n# GeoJson 레이어 추가\nfolium.GeoJson(\n    동대문_강남_영등포_행정구역,\n    tooltip=folium.GeoJsonTooltip(fields=['EMD_NM', '공시지가(원/㎥)']),\n    style_function=style_function\n).add_to(m)\n\n# 지도 출력\nm  # Jupyter Notebook 등에서 지도를 출력\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook"
  },
  {
    "objectID": "posts/Pandas/pandas.html",
    "href": "posts/Pandas/pandas.html",
    "title": "Jung_coding",
    "section": "",
    "text": "도구 - 판다스(pandas)\npandas 라이브러리는 사용하기 쉬운 고성능 데이터 구조와 데이터 분석 도구를 제공합니다. 주 데이터 구조는 DataFrame입니다. 이를 인-메모리(in-memory) 2D 테이블로 생각할 수 있습니다(열 이름과 행 레이블이 있는 스프레드시트와 비슷합니다). 엑셀에 있는 많은 기능을 프로그램에서 사용할 수 있습니다. 여기에는 피봇 테이블이나 다른 열을 기반으로 열을 계산하고 그래프 출력하는 기능 등이 포함됩니다. 열 값으로 행을 그룹핑할 수도 있습니다. 또한 SQL과 비슷하게 테이블을 조인할 수 있습니다. 판다스는 시계열 데이터를 다루는데도 뛰어납니다.\n필요 라이브러리:\n\n넘파이(NumPy) – 넘파이에 익숙하지 않다면 지금 넘파이 튜토리얼을 둘러 보세요.\n\n\n\n\n구글 코랩에서 실행하기"
  },
  {
    "objectID": "posts/Pandas/pandas.html#series-만들기",
    "href": "posts/Pandas/pandas.html#series-만들기",
    "title": "Jung_coding",
    "section": "Series 만들기",
    "text": "Series 만들기\n첫 번째 Series 객체를 만들어 보죠!\n\nimport numpy as np\nnp.array([2,-1,3,5])\n\narray([ 2, -1,  3,  5])\n\n\n\ns = pd.Series([2,-1,3,5])\ns\n\n0    2\n1   -1\n2    3\n3    5\ndtype: int64"
  },
  {
    "objectID": "posts/Pandas/pandas.html#d-ndarray와-비슷합니다",
    "href": "posts/Pandas/pandas.html#d-ndarray와-비슷합니다",
    "title": "Jung_coding",
    "section": "1D ndarray와 비슷합니다",
    "text": "1D ndarray와 비슷합니다\nSeries 객체는 넘파이 ndarray와 비슷하게 동작합니다. 넘파이 함수에 매개변수로 종종 전달할 수 있습니다:\n\nimport numpy as np\nnp.exp(s)\n\n0      7.389056\n1      0.367879\n2     20.085537\n3    148.413159\ndtype: float64\n\n\nSeries 객체에 대한 산술 연산도 가능합니다. ndarray와 비슷하게 원소별로 적용됩니다:\n\ns + [1000,2000,3000,4000]\n\n0    1002\n1    1999\n2    3003\n3    4005\ndtype: int64\n\n\n넘파이와 비슷하게 Series에 하나의 숫자를 더하면 Series에 있는 모든 원소에 더해집니다. 이를 브로드캐스팅(broadcasting)이라고 합니다:\n\ns + 1000\n\n0    1002\n1     999\n2    1003\n3    1005\ndtype: int64\n\n\n*나 / 같은 모든 이항 연산과 심지어 조건 연산에서도 마찬가지입니다:\n\ns < 0\n\n0    False\n1     True\n2    False\n3    False\ndtype: bool"
  },
  {
    "objectID": "posts/Pandas/pandas.html#인덱스-레이블",
    "href": "posts/Pandas/pandas.html#인덱스-레이블",
    "title": "Jung_coding",
    "section": "인덱스 레이블",
    "text": "인덱스 레이블\nSeries 객체에 있는 각 원소는 인덱스 레이블(index label)이라 불리는 고유한 식별자를 가지고 있습니다. 기본적으로 Series에 있는 원소의 순서입니다(0에서 시작합니다). 하지만 수동으로 인덱스 레이블을 지정할 수도 있습니다:\n\ns2 = pd.Series([68, 83, 112, 68], index=[\"alice\", \"bob\", \"charles\", \"darwin\"])\ns2\n\nalice       68\nbob         83\ncharles    112\ndarwin      68\ndtype: int64\n\n\n그다음 dict처럼 Series를 사용할 수 있습니다:\n\ns2[\"bob\"]\n\n83\n\n\n일반 배열처럼 정수 인덱스를 사용하여 계속 원소에 접근할 수 있습니다:\n\ns2[1]\n\n83\n\n\n레이블이나 정수를 사용해 접근할 때 명확하게 하기 위해 레이블은 loc 속성을 사용하고 정수는 iloc 속성을 사용하는 것이 좋습니다:\n\ns2[1]\n# 헷갈리기때문에 잘 쓰지 않음\n\n83\n\n\n\ns2.loc[\"bob\"]\n\n83\n\n\n\ns2.iloc[1]\n\n83\n\n\n23일 수업 종료———– 1장에 대한파일 블로그에 올리기\nSeries는 인덱스 레이블을 슬라이싱할 수도 있습니다:\n\ns2.iloc[1:3]\n\nbob         83\ncharles    112\ndtype: int64\n\n\n기본 정수 레이블을 사용할 때 예상 외의 결과를 만들 수 있기 때문에 주의해야 합니다:\n\nsurprise = pd.Series([1000, 1001, 1002, 1003])\nsurprise\n\n0    1000\n1    1001\n2    1002\n3    1003\ndtype: int64\n\n\n\nsurprise_slice = surprise[2:]\nsurprise_slice\n\n2    1002\n3    1003\ndtype: int64\n\n\n보세요. 첫 번째 원소의 인덱스 레이블이 2입니다. 따라서 슬라이싱 결과에서 인덱스 레이블 0인 원소는 없습니다:\n\ntry:\n    surprise_slice[0]\nexcept KeyError as e:\n    print(\"키 에러:\", e)\n\n키 에러: 0\n\n\n하지만 iloc 속성을 사용해 정수 인덱스로 원소에 접근할 수 있습니다. Series 객체를 사용할 때 loc와 iloc를 사용하는 것이 좋은 이유입니다:\n\nsurprise_slice.iloc[0]\n\n1002\n\n\n\nsurprise_slice.loc[2]\n#레이블을 기준으로 출력\n\n1002"
  },
  {
    "objectID": "posts/Pandas/pandas.html#dict에서-초기화",
    "href": "posts/Pandas/pandas.html#dict에서-초기화",
    "title": "Jung_coding",
    "section": "dict에서 초기화",
    "text": "dict에서 초기화\ndict에서 Series 객체를 만들 수 있습니다. 키는 인덱스 레이블로 사용됩니다:\n\nweights = {\"alice\": 68, \"bob\": 83, \"colin\": 86, \"darwin\": 68}\n\nweights\n\n{'alice': 68, 'bob': 83, 'colin': 86, 'darwin': 68}\n\n\n\nweights = {\"alice\": 68, \"bob\": 83, \"colin\": 86, \"darwin\": 68}\ns3 = pd.Series(weights)\ns3\n\nalice     68\nbob       83\ncolin     86\ndarwin    68\ndtype: int64\n\n\nSeries에 포함할 원소를 제어하고 index를 지정하여 명시적으로 순서를 결정할 수 있습니다:\n\ns4 = pd.Series(weights, index = [\"colin\", \"alice\"])\ns4\n\ncolin    86\nalice    68\ndtype: int64"
  },
  {
    "objectID": "posts/Pandas/pandas.html#자동-정렬",
    "href": "posts/Pandas/pandas.html#자동-정렬",
    "title": "Jung_coding",
    "section": "자동 정렬",
    "text": "자동 정렬\n여러 개의 Series 객체를 다룰 때 pandas는 자동으로 인덱스 레이블에 따라 원소를 정렬합니다.\n\nprint(s2.keys())\nprint(s3.keys())\n\ns2 + s3\n\n#인덱스가 같다면 더해지지만 다르다면 더해지지 않고 두개의 인덱스가 생성된 후 NaN값 반환\n\nIndex(['alice', 'bob', 'charles', 'darwin'], dtype='object')\nIndex(['alice', 'bob', 'colin', 'darwin'], dtype='object')\n\n\nalice      136.0\nbob        166.0\ncharles      NaN\ncolin        NaN\ndarwin     136.0\ndtype: float64\n\n\n만들어진 Series는 s2와 s3의 인덱스 레이블의 합집합을 담고 있습니다. s2에 \"colin\"이 없고 s3에 \"charles\"가 없기 때문에 이 원소는 NaN 값을 가집니다(Not-a-Number는 누락이란 의미입니다).\n자동 정렬은 구조가 다고 누락된 값이 있는 여러 데이터를 다룰 때 매우 편리합니다. 하지만 올바른 인덱스 레이블을 지정하는 것을 잊는다면 원치않는 결과를 얻을 수 있습니다:\n\ns5 = pd.Series([1000,1000,1000,1000])\nprint(\"s2 =\", s2.values)\nprint(\"s5 =\", s5.values)\n\ns2 + s5\n#인덱스가 모두 다르기때문에 인덱스는 순서대로 모두 나열이 되고 values는 모두 NaN반환\n\ns2 = [ 68  83 112  68]\ns5 = [1000 1000 1000 1000]\n\n\nalice     NaN\nbob       NaN\ncharles   NaN\ndarwin    NaN\n0         NaN\n1         NaN\n2         NaN\n3         NaN\ndtype: float64\n\n\n레이블이 하나도 맞지 않기 때문에 판다스가 이 Series를 정렬할 수 없습니다. 따라서 모두 NaN이 되었습니다."
  },
  {
    "objectID": "posts/Pandas/pandas.html#스칼라로-초기화",
    "href": "posts/Pandas/pandas.html#스칼라로-초기화",
    "title": "Jung_coding",
    "section": "스칼라로 초기화",
    "text": "스칼라로 초기화\n스칼라와 인덱스 레이블의 리스트로 Series 객체를 초기화할 수도 있습니다: 모든 원소가 이 스칼라 값으로 설정됩니다.\n\nmeaning = pd.Series(42, [\"life\", \"universe\", \"everything\"])\nmeaning\n\nlife          42\nuniverse      42\neverything    42\ndtype: int64"
  },
  {
    "objectID": "posts/Pandas/pandas.html#series-이름",
    "href": "posts/Pandas/pandas.html#series-이름",
    "title": "Jung_coding",
    "section": "Series 이름",
    "text": "Series 이름\nSeries는 name을 가질 수 있습니다:\n\ns6 = pd.Series([83, 68], index=[\"bob\", \"alice\"], name=\"weights\")\ns6\n\nbob      83\nalice    68\nName: weights, dtype: int64"
  },
  {
    "objectID": "posts/Pandas/pandas.html#series-그래프-출력",
    "href": "posts/Pandas/pandas.html#series-그래프-출력",
    "title": "Jung_coding",
    "section": "Series 그래프 출력",
    "text": "Series 그래프 출력\n맷플롯립을 사용해 Series 데이터를 쉽게 그래프로 출력할 수 있습니다(맷플롯립에 대한 자세한 설명은 맷플롯립 튜토리얼을 참고하세요). 맷플롯립을 임포트하고 plot() 메서드를 호출하면 끝입니다:\n\n#!pip install matplotlib\n%matplotlib inline\nimport matplotlib.pyplot as plt\ntemperatures = [4.4, 5.1, 6.1, 6.2, 6.1, 6.1, 5.7, 5.2, 4.7, 4.1, 3.9, 3.5]\ns7 = pd.Series(temperatures, name=\"Temperature\")\ns7.plot()\nplt.show()\n\n\n\n\n\ns7 = pd.Series(temperatures, name=\"Temperature\")\ns7\n\n0     4.4\n1     5.1\n2     6.1\n3     6.2\n4     6.1\n5     6.1\n6     5.7\n7     5.2\n8     4.7\n9     4.1\n10    3.9\n11    3.5\nName: Temperature, dtype: float64\n\n\n데이터를 그래프로 출력하는데 많은 옵션이 있습니다. 여기에서 모두 나열할 필요는 없습니다. 특정 종류의 그래프(히스토그램, 파이 차트 등)가 필요하면 판다스 문서의 시각화 섹션에서 예제 코드를 참고하세요."
  },
  {
    "objectID": "posts/Pandas/pandas.html#시간-범위",
    "href": "posts/Pandas/pandas.html#시간-범위",
    "title": "Jung_coding",
    "section": "시간 범위",
    "text": "시간 범위\n먼저 pd.date_range()를 사용해 시계열을 만들어 보죠. 이 함수는 2016년 10월 29일 5:30pm에서 시작하여 12시간마다 하나의 datetime을 담고 있는 DatetimeIndex를 반환합니다.\n\n#import pandas as pd\ndates = pd.date_range('2016/10/29 5:30pm', periods=12, freq='H')\n##2시간 간격은 'H'를 '2H'로 변경\ndates\n\n\n\n\n### 5:30pm을 하지 않고 17:30을 해도 같은 값을 출력함, period는 하나의 datetime을 담고있는 DatetimeIndex에 몇개가 들어있는지를 나타내고 freq는 간격을 나타냄\n\nDatetimeIndex(['2016-10-29 17:30:00', '2016-10-29 18:30:00',\n               '2016-10-29 19:30:00', '2016-10-29 20:30:00',\n               '2016-10-29 21:30:00', '2016-10-29 22:30:00',\n               '2016-10-29 23:30:00', '2016-10-30 00:30:00',\n               '2016-10-30 01:30:00', '2016-10-30 02:30:00',\n               '2016-10-30 03:30:00', '2016-10-30 04:30:00'],\n              dtype='datetime64[ns]', freq='H')"
  },
  {
    "objectID": "posts/Pandas/pandas.html#리샘플링",
    "href": "posts/Pandas/pandas.html#리샘플링",
    "title": "Jung_coding",
    "section": "리샘플링",
    "text": "리샘플링\n판다스는 매우 간단하게 시계열을 리샘플링할 수 있습니다. resample() 메서드를 호출하고 새로운 주기를 지정하면 됩니다:\n\ntemp_series_freq_2H = temp_series.resample(\"2H\")\ntemp_series_freq_2H\n\n<pandas.core.resample.DatetimeIndexResampler object at 0x7fbaa88d4430>\n\n\n리샘플링 연산은 사실 지연된 연산입니다. 그래서 Series 객체 대신 DatetimeIndexResampler 객체가 반환됩니다. 실제 리샘플링 연산을 수행하려면 mean() 같은 메서드를 호출할 수 있습니다. 이 메서드는 연속적인 시간 쌍에 대해 평균을 계산합니다:\n\ntemp_series\n\n2016-10-29 17:30:00    4.4\n2016-10-29 18:30:00    5.1\n2016-10-29 19:30:00    6.1\n2016-10-29 20:30:00    6.2\n2016-10-29 21:30:00    6.1\n2016-10-29 22:30:00    6.1\n2016-10-29 23:30:00    5.7\n2016-10-30 00:30:00    5.2\n2016-10-30 01:30:00    4.7\n2016-10-30 02:30:00    4.1\n2016-10-30 03:30:00    3.9\n2016-10-30 04:30:00    3.5\nFreq: H, dtype: float64\n\n\n\n#import pandas as pd\ntemp_series_freq_2H = temp_series_freq_2H.mean()\n\n결과를 그래프로 출력해 보죠:\n\ntemp_series_freq_2H\n\n2016-10-29 16:00:00    4.40\n2016-10-29 18:00:00    5.60\n2016-10-29 20:00:00    6.15\n2016-10-29 22:00:00    5.90\n2016-10-30 00:00:00    4.95\n2016-10-30 02:00:00    4.00\n2016-10-30 04:00:00    3.50\nFreq: 2H, dtype: float64\n\n\n\ntemp_series_freq_2H.plot(kind=\"bar\")\nplt.show()\n\n\n\n\n2시간 간격으로 어떻게 값이 수집되었는지 확인해 보세요. 예를 들어 6-8pm 간격을 보면 6:30pm에서 5.1이고 7:30pm에서 6.1입니다. 리샘플링 후에 5.1과 6.1의 평균인 5.6 하나를 얻었습니다. 평균말고 어떤 집계 함수(aggregation function)도 사용할 수 있습니다. 예를 들어 각 기간에서 최솟값을 찾을 수 있습니다:\n\ntemp_series_freq_2H \n\n2016-10-29 16:00:00    4.40\n2016-10-29 18:00:00    5.60\n2016-10-29 20:00:00    6.15\n2016-10-29 22:00:00    5.90\n2016-10-30 00:00:00    4.95\n2016-10-30 02:00:00    4.00\n2016-10-30 04:00:00    3.50\nFreq: 2H, dtype: float64\n\n\n\ntemp_series\n\n2016-10-29 17:30:00    4.4\n2016-10-29 18:30:00    5.1\n2016-10-29 19:30:00    6.1\n2016-10-29 20:30:00    6.2\n2016-10-29 21:30:00    6.1\n2016-10-29 22:30:00    6.1\n2016-10-29 23:30:00    5.7\n2016-10-30 00:30:00    5.2\n2016-10-30 01:30:00    4.7\n2016-10-30 02:30:00    4.1\n2016-10-30 03:30:00    3.9\n2016-10-30 04:30:00    3.5\nFreq: H, dtype: float64\n\n\n\ntemp_series_freq_2H = temp_series.resample(\"2H\").min()\ntemp_series_freq_2H\n\n2016-10-29 16:00:00    4.4\n2016-10-29 18:00:00    5.1\n2016-10-29 20:00:00    6.1\n2016-10-29 22:00:00    5.7\n2016-10-30 00:00:00    4.7\n2016-10-30 02:00:00    3.9\n2016-10-30 04:00:00    3.5\nFreq: 2H, dtype: float64\n\n\n또는 동일한 효과를 내는 apply() 메서드를 사용할 수 있습니다:\n\ntemp_series_freq_2H = temp_series.resample(\"2H\").apply(np.min)\ntemp_series_freq_2H\n\n2016-10-29 16:00:00    4.4\n2016-10-29 18:00:00    5.1\n2016-10-29 20:00:00    6.1\n2016-10-29 22:00:00    5.7\n2016-10-30 00:00:00    4.7\n2016-10-30 02:00:00    3.9\n2016-10-30 04:00:00    3.5\nFreq: 2H, dtype: float64"
  },
  {
    "objectID": "posts/Pandas/pandas.html#업샘플링과-보간",
    "href": "posts/Pandas/pandas.html#업샘플링과-보간",
    "title": "Jung_coding",
    "section": "업샘플링과 보간",
    "text": "업샘플링과 보간\n다운샘플링의 예를 보았습니다. 하지만 업샘플링(즉, 빈도를 높입니다)도 할 수 있습니다. 하지만 데이터에 구멍을 만듭니다:\n\ntemp_series_freq_15min = temp_series.resample(\"15Min\").mean()\ntemp_series_freq_15min.head(n=10) # `head`는 상위 n 개의 값만 출력합니다\n\n2016-10-29 17:30:00    4.4\n2016-10-29 17:45:00    NaN\n2016-10-29 18:00:00    NaN\n2016-10-29 18:15:00    NaN\n2016-10-29 18:30:00    5.1\n2016-10-29 18:45:00    NaN\n2016-10-29 19:00:00    NaN\n2016-10-29 19:15:00    NaN\n2016-10-29 19:30:00    6.1\n2016-10-29 19:45:00    NaN\nFreq: 15T, dtype: float64\n\n\n한가지 방법은 보간으로 사이를 채우는 것입니다. 이렇게 하려면 interpolate() 메서드를 호출합니다. 기본값은 선형 보간이지만 3차 보간(cubic interpolation) 같은 다른 방법을 선택할 수 있습니다:\n\n#!pip install scipy\ntemp_series_freq_15min = temp_series.resample(\"15Min\").interpolate(method=\"cubic\")\ntemp_series_freq_15min.head(n=10)\n\n#interpolate()는 누락된 값을 추정하여 채우는 함수\n#cubicd은 3차 다항식을 이용하여 누락된 값들을 추정합니다.\n\n2016-10-29 17:30:00    4.400000\n2016-10-29 17:45:00    4.452911\n2016-10-29 18:00:00    4.605113\n2016-10-29 18:15:00    4.829758\n2016-10-29 18:30:00    5.100000\n2016-10-29 18:45:00    5.388992\n2016-10-29 19:00:00    5.669887\n2016-10-29 19:15:00    5.915839\n2016-10-29 19:30:00    6.100000\n2016-10-29 19:45:00    6.203621\nFreq: 15T, dtype: float64\n\n\n\ntemp_series.plot(label=\"Period: 1 hour\")\ntemp_series_freq_15min.plot(label=\"Period: 15 minutes\")\nplt.legend()\n# 범례를 추가하는 함수\nplt.show()"
  },
  {
    "objectID": "posts/Pandas/pandas.html#시간대",
    "href": "posts/Pandas/pandas.html#시간대",
    "title": "Jung_coding",
    "section": "시간대",
    "text": "시간대\n기본적으로 datetime은 단순합니다. 시간대(timezone)을 고려하지 않죠. 따라서 2016-10-30 02:30는 파리나 뉴욕이나 2016년 10월 30일 2:30pm입니다. tz_localize() 메서드로 시간대를 고려한 datetime을 만들 수 있습니다:\n\ntemp_series_ny = temp_series.tz_localize(\"America/New_York\")\ntemp_series_ny\n\n2016-10-29 17:30:00-04:00    4.4\n2016-10-29 18:30:00-04:00    5.1\n2016-10-29 19:30:00-04:00    6.1\n2016-10-29 20:30:00-04:00    6.2\n2016-10-29 21:30:00-04:00    6.1\n2016-10-29 22:30:00-04:00    6.1\n2016-10-29 23:30:00-04:00    5.7\n2016-10-30 00:30:00-04:00    5.2\n2016-10-30 01:30:00-04:00    4.7\n2016-10-30 02:30:00-04:00    4.1\n2016-10-30 03:30:00-04:00    3.9\n2016-10-30 04:30:00-04:00    3.5\ndtype: float64\n\n\n모든 datetime에 -04:00이 추가됩니다. 즉 모든 시간은 UTC - 4시간을 의미합니다.\n다음처럼 파리 시간대로 바꿀 수 있습니다:\n\ntemp_series_paris = temp_series_ny.tz_convert(\"Europe/Paris\")\ntemp_series_paris\n\n2016-10-29 23:30:00+02:00    4.4\n2016-10-30 00:30:00+02:00    5.1\n2016-10-30 01:30:00+02:00    6.1\n2016-10-30 02:30:00+02:00    6.2\n2016-10-30 02:30:00+01:00    6.1\n2016-10-30 03:30:00+01:00    6.1\n2016-10-30 04:30:00+01:00    5.7\n2016-10-30 05:30:00+01:00    5.2\n2016-10-30 06:30:00+01:00    4.7\n2016-10-30 07:30:00+01:00    4.1\n2016-10-30 08:30:00+01:00    3.9\n2016-10-30 09:30:00+01:00    3.5\ndtype: float64\n\n\nUTC와의 차이가 +02:00에서 +01:00으로 바뀐 것을 알 수 있습니다. 이는 프랑스가 10월 30일 3am에 겨울 시간으로 바꾸기 때문입니다(2am으로 바뀝니다). 따라서 2:30am이 두 번 등장합니다! 시간대가 없는 표현으로 돌아가 보죠(시간대가 없이 지역 시간으로 매시간 로그를 기록하는 경우 이와 비슷할 것입니다):\n\ntemp_series_paris_naive = temp_series_paris.tz_localize(None)\ntemp_series_paris_naive\n\n2016-10-29 23:30:00    4.4\n2016-10-30 00:30:00    5.1\n2016-10-30 01:30:00    6.1\n2016-10-30 02:30:00    6.2\n2016-10-30 02:30:00    6.1\n2016-10-30 03:30:00    6.1\n2016-10-30 04:30:00    5.7\n2016-10-30 05:30:00    5.2\n2016-10-30 06:30:00    4.7\n2016-10-30 07:30:00    4.1\n2016-10-30 08:30:00    3.9\n2016-10-30 09:30:00    3.5\ndtype: float64\n\n\n이렇게 되면 02:30이 정말 애매합니다. 시간대가 없는 datetime을 파리 시간대로 바꿀 때 에러가 발생합니다:\n\ntry:\n    temp_series_paris_naive.tz_localize(\"Europe/Paris\")\nexcept Exception as e:\n    print(type(e))\n    print(e)\n\n<class 'pytz.exceptions.AmbiguousTimeError'>\nCannot infer dst time from 2016-10-30 02:30:00, try using the 'ambiguous' argument\n\n\n다행히 ambiguous 매개변수를 사용하면 판다스가 타임스탬프의 순서를 기반으로 적절한 DST(일광 절약 시간제)를 추측합니다:\n\ntemp_series_paris_naive.tz_localize(\"Europe/Paris\", ambiguous=\"infer\")\n\n2016-10-29 23:30:00+02:00    4.4\n2016-10-30 00:30:00+02:00    5.1\n2016-10-30 01:30:00+02:00    6.1\n2016-10-30 02:30:00+02:00    6.2\n2016-10-30 02:30:00+01:00    6.1\n2016-10-30 03:30:00+01:00    6.1\n2016-10-30 04:30:00+01:00    5.7\n2016-10-30 05:30:00+01:00    5.2\n2016-10-30 06:30:00+01:00    4.7\n2016-10-30 07:30:00+01:00    4.1\n2016-10-30 08:30:00+01:00    3.9\n2016-10-30 09:30:00+01:00    3.5\ndtype: float64"
  },
  {
    "objectID": "posts/Pandas/pandas.html#기간",
    "href": "posts/Pandas/pandas.html#기간",
    "title": "Jung_coding",
    "section": "기간",
    "text": "기간\npd.period_range() 함수는 DatetimeIndex가 아니라 PeriodIndex를 반환합니다. 예를 들어 2016과 2017년의 전체 분기를 가져와 보죠:\n\nquarters = pd.period_range('2016Q1', periods=8, freq='Q')\nquarters\n\nPeriodIndex(['2016Q1', '2016Q2', '2016Q3', '2016Q4', '2017Q1', '2017Q2',\n             '2017Q3', '2017Q4'],\n            dtype='period[Q-DEC]')\n\n\nPeriodIndex에 숫자 N을 추가하면 PeriodIndex 빈도의 N 배만큼 이동시킵니다:\n\nquarters + 3\n\nPeriodIndex(['2016Q4', '2017Q1', '2017Q2', '2017Q3', '2017Q4', '2018Q1',\n             '2018Q2', '2018Q3'],\n            dtype='period[Q-DEC]')\n\n\nasfreq() 메서드를 사용하면 PeriodIndex의 빈도를 바꿀 수 있습니다. 모든 기간이 늘어나거나 줄어듭니다. 예를 들어 분기 기간을 모두 월별 기간으로 바꾸어 보죠:\n\nquarters.asfreq(\"M\")\n\nPeriodIndex(['2016-03', '2016-06', '2016-09', '2016-12', '2017-03', '2017-06',\n             '2017-09', '2017-12'],\n            dtype='period[M]')\n\n\n기본적으로 asfreq는 각 기간의 끝에 맞춥니다. 기간의 시작에 맞추도록 변경할 수 있습니다:\n\nquarters.asfreq(\"M\", how=\"start\")\n\nPeriodIndex(['2016-01', '2016-04', '2016-07', '2016-10', '2017-01', '2017-04',\n             '2017-07', '2017-10'],\n            dtype='period[M]')\n\n\n간격을 늘릴 수도 있습니다: pandas 공식 메뉴얼 참조\n\nquarters.asfreq(\"A\")\n\nPeriodIndex(['2016', '2016', '2016', '2016', '2017', '2017', '2017', '2017'], dtype='period[A-DEC]')\n\n\n물론 PeriodIndex로 Series를 만들 수 있습니다:\n\nquarterly_revenue = pd.Series([300, 320, 290, 390, 320, 360, 310, 410], index = quarters)\nquarterly_revenue\n\n2016Q1    300\n2016Q2    320\n2016Q3    290\n2016Q4    390\n2017Q1    320\n2017Q2    360\n2017Q3    310\n2017Q4    410\nFreq: Q-DEC, dtype: int64\n\n\n\nquarterly_revenue.plot(kind=\"line\")\nplt.show()\n\n\n\n\nto_timestamp를 호출해서 기간을 타임스탬프로 변경할 수 있습니다. 기본적으로 기간의 첫 번째 날을 반환합니다. 하지만 how와 freq를 지정해서 기간의 마지막 시간을 얻을 수 있습니다:\n\nquarterly_revenue\n\n2016Q1    300\n2016Q2    320\n2016Q3    290\n2016Q4    390\n2017Q1    320\n2017Q2    360\n2017Q3    310\n2017Q4    410\nFreq: Q-DEC, dtype: int64\n\n\n\nlast_hours = quarterly_revenue.to_timestamp(how=\"end\", freq=\"H\")\nlast_hours\n\n\n\n##how를 start로 바꾸면 1월 1일 00시 00분 00초로 바뀜\n## 0은 나타나지 않음\n\n2016-03-31 23:59:59.999999999    300\n2016-06-30 23:59:59.999999999    320\n2016-09-30 23:59:59.999999999    290\n2016-12-31 23:59:59.999999999    390\n2017-03-31 23:59:59.999999999    320\n2017-06-30 23:59:59.999999999    360\n2017-09-30 23:59:59.999999999    310\n2017-12-31 23:59:59.999999999    410\ndtype: int64\n\n\nto_peroid를 호출하면 다시 기간으로 돌아갑니다:\n\nlast_hours.to_period()\n\n2016Q1    300\n2016Q2    320\n2016Q3    290\n2016Q4    390\n2017Q1    320\n2017Q2    360\n2017Q3    310\n2017Q4    410\nFreq: Q-DEC, dtype: int64\n\n\n판다스는 여러 가지 시간 관련 함수를 많이 제공합니다. 온라인 문서를 확인해 보세요. 예를 하나 들면 2016년 매월 마지막 업무일의 9시를 얻는 방법은 다음과 같습니다:\n\nmonths_2022 = pd.period_range(\"2022\", periods=12, freq=\"M\")\none_day_after_last_days = months_2022.asfreq(\"D\") + 1\nlast_bdays = one_day_after_last_days.to_timestamp() - pd.tseries.offsets.BDay(n=1)\nlast_bdays.to_period(\"H\") + 9\n\nPeriodIndex(['2022-01-31 09:00', '2022-02-28 09:00', '2022-03-31 09:00',\n             '2022-04-29 09:00', '2022-05-31 09:00', '2022-06-30 09:00',\n             '2022-07-29 09:00', '2022-08-31 09:00', '2022-09-30 09:00',\n             '2022-10-31 09:00', '2022-11-30 09:00', '2022-12-30 09:00'],\n            dtype='period[H]')\n\n\n\nmonths_2022\n\nPeriodIndex(['2022-01', '2022-02', '2022-03', '2022-04', '2022-05', '2022-06',\n             '2022-07', '2022-08', '2022-09', '2022-10', '2022-11', '2022-12'],\n            dtype='period[M]')\n\n\n\none_day_after_last_days\n\nPeriodIndex(['2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01',\n             '2022-06-01', '2022-07-01', '2022-08-01', '2022-09-01',\n             '2022-10-01', '2022-11-01', '2022-12-01', '2023-01-01'],\n            dtype='period[D]')\n\n\n\none_day_after_last_days.to_timestamp()\n\nDatetimeIndex(['2022-02-01', '2022-03-01', '2022-04-01', '2022-05-01',\n               '2022-06-01', '2022-07-01', '2022-08-01', '2022-09-01',\n               '2022-10-01', '2022-11-01', '2022-12-01', '2023-01-01'],\n              dtype='datetime64[ns]', freq='MS')\n\n\n\none_day_after_last_days.to_timestamp() - pd.tseries.offsets.BDay(n=1)\n\nDatetimeIndex(['2022-01-31', '2022-02-28', '2022-03-31', '2022-04-29',\n               '2022-05-31', '2022-06-30', '2022-07-29', '2022-08-31',\n               '2022-09-30', '2022-10-31', '2022-11-30', '2022-12-30'],\n              dtype='datetime64[ns]', freq=None)"
  },
  {
    "objectID": "posts/Pandas/pandas.html#dataframe-만들기",
    "href": "posts/Pandas/pandas.html#dataframe-만들기",
    "title": "Jung_coding",
    "section": "DataFrame 만들기",
    "text": "DataFrame 만들기\nSeries 객체의 딕셔너리를 전달하여 데이터프레임을 만들 수 있습니다:\n\nimport pandas as pd\n\npeople_dict = {\n    \"weight\": pd.Series([68, 83, 112], index=[\"alice\", \"bob\", \"charles\"]),\n    \"birthyear\": pd.Series([1984, 1985, 1992], index=[\"bob\", \"alice\", \"charles\"], name=\"year\"),\n    \"children\": pd.Series([0, 3], index=[\"charles\", \"bob\"]),\n    \"hobby\": pd.Series([\"Biking\", \"Dancing\"], index=[\"alice\", \"bob\"]),\n}\npeople = pd.DataFrame(people_dict)\npeople\n\n\n\n#인덱스(행) 컬럼(열)로 구성이 된다\n\n\n\n\n\n  \n    \n      \n      weight\n      birthyear\n      children\n      hobby\n    \n  \n  \n    \n      alice\n      68\n      1985\n      NaN\n      Biking\n    \n    \n      bob\n      83\n      1984\n      3.0\n      Dancing\n    \n    \n      charles\n      112\n      1992\n      0.0\n      NaN\n    \n  \n\n\n\n\n몇가지 알아 두어야 할 것은 다음과 같습니다:\n\nSeries는 인덱스를 기반으로 자동으로 정렬됩니다.\n누란된 값은 NaN으로 표현됩니다.\nSeries 이름은 무시됩니다(\"year\"란 이름은 삭제됩니다).\nDataFrame은 주피터 노트북에서 멋지게 출력됩니다!\n\n예상하는 방식으로 열을 참조할 수 있고 Serires 객체가 반환됩니다:\n\npeople[\"birthyear\"]\n\nalice      1985\nbob        1984\ncharles    1992\nName: birthyear, dtype: int64\n\n\n동시에 여러 개의 열을 선택할 수 있습니다:\n\npeople[[\"birthyear\", \"hobby\"]]\n\n\n\n\n\n  \n    \n      \n      birthyear\n      hobby\n    \n  \n  \n    \n      alice\n      1985\n      Biking\n    \n    \n      bob\n      1984\n      Dancing\n    \n    \n      charles\n      1992\n      NaN\n    \n  \n\n\n\n\n\npeople.iloc[[0,1],[0,1]]\n\n\npeople.loc[[\"alice\",\"bob\"],[\"weight\",\"birthyear\"]]\n\n\n\n\n\n  \n    \n      \n      weight\n      birthyear\n    \n  \n  \n    \n      alice\n      68\n      1985\n    \n    \n      bob\n      83\n      1984\n    \n  \n\n\n\n\n열 리스트나 행 인덱스 레이블을 DataFrame 생성자에 전달하면 해당 열과 행으로 채워진 데이터프레임이 반환됩니다. 예를 들면:\n\nd2 = pd.DataFrame(\n        people_dict,\n        columns=[\"birthyear\", \"weight\", \"height\"],\n        index=[\"bob\", \"alice\", \"eugene\"]\n     )\nd2\n\n\n\n\n\n  \n    \n      \n      birthyear\n      weight\n      height\n    \n  \n  \n    \n      bob\n      1984.0\n      83.0\n      NaN\n    \n    \n      alice\n      1985.0\n      68.0\n      NaN\n    \n    \n      eugene\n      NaN\n      NaN\n      NaN\n    \n  \n\n\n\n\nDataFrame을 만드는 또 다른 편리한 방법은 ndarray나 리스트의 리스트로 모든 값을 생성자에게 전달하고 열 이름과 행 인덱스 레이블을 각기 지정하는 것입니다:\n\nvalues = [\n            [1985, np.nan, \"Biking\",   68],\n            [1984, 3,      \"Dancing\",  83],\n            [1992, 0,      np.nan,    112]\n         ]\n#nan 값은 numpy를 이용하여 처리\n\n\nd3 = pd.DataFrame(\n        values,\n        columns=[\"birthyear\", \"children\", \"hobby\", \"weight\"],\n        index=[\"alice\", \"bob\", \"charles\"]\n     )\nd3\n\n\n\n\n\n  \n    \n      \n      birthyear\n      children\n      hobby\n      weight\n    \n  \n  \n    \n      alice\n      1985\n      NaN\n      Biking\n      68\n    \n    \n      bob\n      1984\n      3.0\n      Dancing\n      83\n    \n    \n      charles\n      1992\n      0.0\n      NaN\n      112\n    \n  \n\n\n\n\n누락된 값을 지정하려면 np.nan이나 넘파이 마스크 배열을 사용합니다:\n\nmasked_array = np.ma.asarray(values, dtype=np.object)\nmasked_array[(0, 2), (1, 2)] = np.ma.masked\nd3 = pd.DataFrame(\n        masked_array,\n        columns=[\"birthyear\", \"children\", \"hobby\", \"weight\"],\n        index=[\"alice\", \"bob\", \"charles\"]\n     )\nd3\n\n/var/folders/jm/p7tw90mn0m9c_dsbyjy_sxq40000gn/T/ipykernel_1634/1456005722.py:1: FutureWarning: In the future `np.object` will be defined as the corresponding NumPy scalar.\n  masked_array = np.ma.asarray(values, dtype=np.object)\n\n\nAttributeError: module 'numpy' has no attribute 'object'.\n`np.object` was a deprecated alias for the builtin `object`. To avoid this error in existing code, use `object` by itself. Doing this will not modify any behavior and is safe. \nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n\n\nndarray 대신에 DataFrame 객체를 전달할 수도 있습니다:\n\nd4 = pd.DataFrame(\n         d3,\n         columns=[\"hobby\", \"children\"],\n         index=[\"alice\", \"bob\"]\n     )\nd4\n\n\n\n\n\n  \n    \n      \n      hobby\n      children\n    \n  \n  \n    \n      alice\n      Biking\n      NaN\n    \n    \n      bob\n      Dancing\n      3.0\n    \n  \n\n\n\n\n딕셔너리의 딕셔너리(또는 리스트의 리스트)로 DataFrame을 만들 수 있습니다:\n\npeople = pd.DataFrame({\n    \"birthyear\": {\"alice\":1985, \"bob\": 1984, \"charles\": 1992},\n    \"hobby\": {\"alice\":\"Biking\", \"bob\": \"Dancing\"},\n    \"weight\": {\"alice\":68, \"bob\": 83, \"charles\": 112},\n    \"children\": {\"bob\": 3, \"charles\": 0}\n})\npeople\n\n\n\n\n\n  \n    \n      \n      birthyear\n      hobby\n      weight\n      children\n    \n  \n  \n    \n      alice\n      1985\n      Biking\n      68\n      NaN\n    \n    \n      bob\n      1984\n      Dancing\n      83\n      3.0\n    \n    \n      charles\n      1992\n      NaN\n      112\n      0.0"
  },
  {
    "objectID": "posts/Pandas/pandas.html#멀티-인덱싱",
    "href": "posts/Pandas/pandas.html#멀티-인덱싱",
    "title": "Jung_coding",
    "section": "멀티 인덱싱",
    "text": "멀티 인덱싱\n모든 열이 같은 크기의 튜플이면 멀티 인덱스로 인식합니다. 열 인덱스 레이블에도 같은 방식이 적용됩니다. 예를 들면:\n\nd5 = pd.DataFrame(\n  {\n    (\"public\", \"birthyear\"):\n        {(\"Paris\",\"alice\"):1985, (\"Paris\",\"bob\"): 1984, (\"London\",\"charles\"): 1992},\n    (\"public\", \"hobby\"):\n        {(\"Paris\",\"alice\"):\"Biking\", (\"Paris\",\"bob\"): \"Dancing\"},\n    (\"private\", \"weight\"):\n        {(\"Paris\",\"alice\"):68, (\"Paris\",\"bob\"): 83, (\"London\",\"charles\"): 112},\n    (\"private\", \"children\"):\n        {(\"Paris\", \"alice\"):np.nan, (\"Paris\",\"bob\"): 3, (\"London\",\"charles\"): 0}\n  }\n)\nd5\n\n\n\n\n\n  \n    \n      \n      \n      public\n      private\n    \n    \n      \n      \n      birthyear\n      hobby\n      weight\n      children\n    \n  \n  \n    \n      Paris\n      alice\n      1985\n      Biking\n      68\n      NaN\n    \n    \n      bob\n      1984\n      Dancing\n      83\n      3.0\n    \n    \n      London\n      charles\n      1992\n      NaN\n      112\n      0.0\n    \n  \n\n\n\n\n이제 \"public\" 열을 모두 담은 DataFrame을 손쉽게 만들 수 있습니다:\n\nd5[\"public\"]\n\n\n\n\n\n  \n    \n      \n      \n      birthyear\n      hobby\n    \n  \n  \n    \n      Paris\n      alice\n      1985\n      Biking\n    \n    \n      bob\n      1984\n      Dancing\n    \n    \n      London\n      charles\n      1992\n      NaN\n    \n  \n\n\n\n\n\nd5[\"public\", \"hobby\"]  # d5[\"public\"][\"hobby\"]와 같습니다.\n\nParis   alice       Biking\n        bob        Dancing\nLondon  charles        NaN\nName: (public, hobby), dtype: object"
  },
  {
    "objectID": "posts/Pandas/pandas.html#레벨-낮추기",
    "href": "posts/Pandas/pandas.html#레벨-낮추기",
    "title": "Jung_coding",
    "section": "레벨 낮추기",
    "text": "레벨 낮추기\nd5를 다시 확인해 보죠:\n\nd5\n\n\n\n\n\n  \n    \n      \n      \n      public\n      private\n    \n    \n      \n      \n      birthyear\n      hobby\n      weight\n      children\n    \n  \n  \n    \n      Paris\n      alice\n      1985\n      Biking\n      68\n      NaN\n    \n    \n      bob\n      1984\n      Dancing\n      83\n      3.0\n    \n    \n      London\n      charles\n      1992\n      NaN\n      112\n      0.0\n    \n  \n\n\n\n\n열의 레벨(level)이 2개이고 인덱스 레벨이 2개입니다. droplevel()을 사용해 열 레벨을 낮출 수 있습니다(인덱스도 마찬가지입니다):\n\nd5.columns = d5.columns.droplevel(level = 0)\nd5\n\n\n\n\n\n  \n    \n      \n      \n      birthyear\n      hobby\n      weight\n      children\n    \n  \n  \n    \n      Paris\n      alice\n      1985\n      Biking\n      68\n      NaN\n    \n    \n      bob\n      1984\n      Dancing\n      83\n      3.0\n    \n    \n      London\n      charles\n      1992\n      NaN\n      112\n      0.0"
  },
  {
    "objectID": "posts/Pandas/pandas.html#전치",
    "href": "posts/Pandas/pandas.html#전치",
    "title": "Jung_coding",
    "section": "전치",
    "text": "전치\nT 속성을 사용해 열과 인덱스를 바꿀 수 있습니다:\n\nd6 = d5.T\nd6\n\n\n\n\n\n  \n    \n      \n      Paris\n      London\n    \n    \n      \n      alice\n      bob\n      charles\n    \n  \n  \n    \n      birthyear\n      1985\n      1984\n      1992\n    \n    \n      hobby\n      Biking\n      Dancing\n      NaN\n    \n    \n      weight\n      68\n      83\n      112\n    \n    \n      children\n      NaN\n      3.0\n      0.0"
  },
  {
    "objectID": "posts/Pandas/pandas.html#레벨-스택과-언스택",
    "href": "posts/Pandas/pandas.html#레벨-스택과-언스택",
    "title": "Jung_coding",
    "section": "레벨 스택과 언스택",
    "text": "레벨 스택과 언스택\nstack() 메서드는 가장 낮은 열 레벨을 가장 낮은 인덱스 뒤에 추가합니다:\n\nd7 = d6.stack()\nd7\n\n\n\n\n\n  \n    \n      \n      \n      London\n      Paris\n    \n  \n  \n    \n      birthyear\n      alice\n      NaN\n      1985\n    \n    \n      bob\n      NaN\n      1984\n    \n    \n      charles\n      1992\n      NaN\n    \n    \n      hobby\n      alice\n      NaN\n      Biking\n    \n    \n      bob\n      NaN\n      Dancing\n    \n    \n      weight\n      alice\n      NaN\n      68\n    \n    \n      bob\n      NaN\n      83\n    \n    \n      charles\n      112\n      NaN\n    \n    \n      children\n      bob\n      NaN\n      3.0\n    \n    \n      charles\n      0.0\n      NaN\n    \n  \n\n\n\n\nNaN 값이 생겼습니다. 이전에 없던 조합이 생겼기 때문입니다(예를 들어 London에 bob이 없었습니다).\nunstack()을 호출하면 반대가 됩니다. 여기에서도 많은 NaN 값이 생성됩니다.\n\nd8 = d7.unstack()\nd8\n\n\n\n\n\n  \n    \n      \n      London\n      Paris\n    \n    \n      \n      alice\n      bob\n      charles\n      alice\n      bob\n      charles\n    \n  \n  \n    \n      birthyear\n      NaN\n      NaN\n      1992\n      1985\n      1984\n      NaN\n    \n    \n      children\n      NaN\n      NaN\n      0.0\n      NaN\n      3.0\n      NaN\n    \n    \n      hobby\n      NaN\n      NaN\n      NaN\n      Biking\n      Dancing\n      NaN\n    \n    \n      weight\n      NaN\n      NaN\n      112\n      68\n      83\n      NaN\n    \n  \n\n\n\n\nunstack을 다시 호출하면 Series 객체가 만들어 집니다:\n\nd9 = d8.unstack()\nd9\n\nLondon  alice    birthyear        NaN\n                 children         NaN\n                 hobby            NaN\n                 weight           NaN\n        bob      birthyear        NaN\n                 children         NaN\n                 hobby            NaN\n                 weight           NaN\n        charles  birthyear       1992\n                 children         0.0\n                 hobby            NaN\n                 weight           112\nParis   alice    birthyear       1985\n                 children         NaN\n                 hobby         Biking\n                 weight            68\n        bob      birthyear       1984\n                 children         3.0\n                 hobby        Dancing\n                 weight            83\n        charles  birthyear        NaN\n                 children         NaN\n                 hobby            NaN\n                 weight           NaN\ndtype: object\n\n\nstack()과 unstack() 메서드를 사용할 때 스택/언스택할 level을 선택할 수 있습니다. 심지어 한 번에 여러 개의 레벨을 스택/언스택할 수도 있습니다:\n\nd10 = d9.unstack(level = (0,1))\nd10\n\n\n\n\n\n  \n    \n      \n      London\n      Paris\n    \n    \n      \n      alice\n      bob\n      charles\n      alice\n      bob\n      charles\n    \n  \n  \n    \n      birthyear\n      NaN\n      NaN\n      1992\n      1985\n      1984\n      NaN\n    \n    \n      children\n      NaN\n      NaN\n      0.0\n      NaN\n      3.0\n      NaN\n    \n    \n      hobby\n      NaN\n      NaN\n      NaN\n      Biking\n      Dancing\n      NaN\n    \n    \n      weight\n      NaN\n      NaN\n      112\n      68\n      83\n      NaN"
  },
  {
    "objectID": "posts/Pandas/pandas.html#대부분의-메서드는-수정된-복사본을-반환합니다",
    "href": "posts/Pandas/pandas.html#대부분의-메서드는-수정된-복사본을-반환합니다",
    "title": "Jung_coding",
    "section": "대부분의 메서드는 수정된 복사본을 반환합니다",
    "text": "대부분의 메서드는 수정된 복사본을 반환합니다\n눈치챘겠지만 stack()과 unstack() 메서드는 객체를 수정하지 않습니다. 대신 복사본을 만들어 반환합니다. 판다스에 있는 대부분의 메서드들이 이렇게 동작합니다."
  },
  {
    "objectID": "posts/Pandas/pandas.html#행-참조하기",
    "href": "posts/Pandas/pandas.html#행-참조하기",
    "title": "Jung_coding",
    "section": "행 참조하기",
    "text": "행 참조하기\npeople DataFrame으로 돌아가 보죠:\n\npeople\n\n\n\n\n\n  \n    \n      \n      birthyear\n      hobby\n      weight\n      children\n    \n  \n  \n    \n      alice\n      1985\n      Biking\n      68\n      NaN\n    \n    \n      bob\n      1984\n      Dancing\n      83\n      3.0\n    \n    \n      charles\n      1992\n      NaN\n      112\n      0.0\n    \n  \n\n\n\n\nloc 속성으로 열 대신 행을 참조할 수 있습니다. DataFrame의 열 이름이 행 인덱스 레이블로 매핑된 Series 객체가 반환됩니다:\n\npeople.loc[\"charles\"]\n\nbirthyear    1992\nhobby         NaN\nweight        112\nchildren      0.0\nName: charles, dtype: object\n\n\n\npeople[\"birthyear\"]\n\nalice      1985\nbob        1984\ncharles    1992\nName: birthyear, dtype: int64\n\n\niloc 속성을 사용해 정수 인덱스로 행을 참조할 수 있습니다:\n\npeople.iloc[2]\n\nbirthyear    1992\nhobby         NaN\nweight        112\nchildren      0.0\nName: charles, dtype: object\n\n\n행을 슬라이싱할 수 있으며 DataFrame 객체가 반환됩니다:\n\npeople.iloc[1:3]\n\n\n\n\n\n  \n    \n      \n      birthyear\n      hobby\n      weight\n      children\n    \n  \n  \n    \n      bob\n      1984\n      Dancing\n      83\n      3.0\n    \n    \n      charles\n      1992\n      NaN\n      112\n      0.0\n    \n  \n\n\n\n\n마자믹으로 불리언 배열을 전달하여 해당하는 행을 가져올 수 있습니다:\n\npeople[np.array([True, False, True])]\n\n\n\n\n\n  \n    \n      \n      birthyear\n      hobby\n      weight\n      children\n    \n  \n  \n    \n      alice\n      1985\n      Biking\n      68\n      NaN\n    \n    \n      charles\n      1992\n      NaN\n      112\n      0.0\n    \n  \n\n\n\n\n불리언 표현식을 사용할 때 아주 유용합니다:\n\npeople[people[\"birthyear\"] < 1990]\n\n\n\n\n\n  \n    \n      \n      birthyear\n      hobby\n      weight\n      children\n    \n  \n  \n    \n      alice\n      1985\n      Biking\n      68\n      NaN\n    \n    \n      bob\n      1984\n      Dancing\n      83\n      3.0\n    \n  \n\n\n\n\n\nfiltered = people[\"birthyear\"] < 1990\npeople[filtered]\n\n\n\n\n\n  \n    \n      \n      birthyear\n      hobby\n      weight\n      children\n    \n  \n  \n    \n      alice\n      1985\n      Biking\n      68\n      NaN\n    \n    \n      bob\n      1984\n      Dancing\n      83\n      3.0"
  },
  {
    "objectID": "posts/Pandas/pandas.html#열-추가-삭제",
    "href": "posts/Pandas/pandas.html#열-추가-삭제",
    "title": "Jung_coding",
    "section": "열 추가, 삭제",
    "text": "열 추가, 삭제\nDataFrame을 Series의 딕셔너리처럼 다룰 수 있습니다. 따라서 다음 같이 쓸 수 있습니다:\n\npeople\n\n\n\n\n\n  \n    \n      \n      birthyear\n      hobby\n      weight\n      children\n    \n  \n  \n    \n      alice\n      1985\n      Biking\n      68\n      NaN\n    \n    \n      bob\n      1984\n      Dancing\n      83\n      3.0\n    \n    \n      charles\n      1992\n      NaN\n      112\n      0.0\n    \n  \n\n\n\n\n\npeople[\"age\"] = 2018 - people[\"birthyear\"]  # \"age\" 열을 추가합니다\npeople[\"over 30\"] = people[\"age\"] > 30      # \"over 30\" 열을 추가합니다\nbirthyears = people.pop(\"birthyear\")\ndel people[\"children\"]\n\npeople\n\n\n\n\n\n  \n    \n      \n      hobby\n      weight\n      age\n      over 30\n    \n  \n  \n    \n      alice\n      Biking\n      68\n      33\n      True\n    \n    \n      bob\n      Dancing\n      83\n      34\n      True\n    \n    \n      charles\n      NaN\n      112\n      26\n      False\n    \n  \n\n\n\n\n\nbirthyears\n\nalice      1985\nbob        1984\ncharles    1992\nName: birthyear, dtype: int64\n\n\n새로운 열을 추가할 때 행의 개수는 같아야 합니다. 누락된 행은 NaN으로 채워지고 추가적인 행은 무시됩니다:\n\npeople[\"pets\"] = pd.Series({\"bob\": 0, \"charles\": 5, \"eugene\":1})  # alice 누락됨, eugene은 무시됨\npeople\n\n\n\n\n\n  \n    \n      \n      hobby\n      weight\n      age\n      over 30\n      pets\n    \n  \n  \n    \n      alice\n      Biking\n      68\n      33\n      True\n      NaN\n    \n    \n      bob\n      Dancing\n      83\n      34\n      True\n      0.0\n    \n    \n      charles\n      NaN\n      112\n      26\n      False\n      5.0\n    \n  \n\n\n\n\n새로운 열을 추가할 때 기본적으로 (오른쪽) 끝에 추가됩니다. insert() 메서드를 사용해 다른 곳에 열을 추가할 수 있습니다:\n\npeople.insert(1, \"height\", [172, 181, 185])\npeople\n\n\n\n\n\n  \n    \n      \n      hobby\n      height\n      weight\n      age\n      over 30\n      pets\n    \n  \n  \n    \n      alice\n      Biking\n      172\n      68\n      33\n      True\n      NaN\n    \n    \n      bob\n      Dancing\n      181\n      83\n      34\n      True\n      0.0\n    \n    \n      charles\n      NaN\n      185\n      112\n      26\n      False\n      5.0"
  },
  {
    "objectID": "posts/Pandas/pandas.html#새로운-열-할당하기",
    "href": "posts/Pandas/pandas.html#새로운-열-할당하기",
    "title": "Jung_coding",
    "section": "새로운 열 할당하기",
    "text": "새로운 열 할당하기\nassign() 메서드를 호출하여 새로운 열을 만들 수도 있습니다. 이는 새로운 DataFrame 객체를 반환하며 원본 객체는 변경되지 않습니다:\n\npeople.assign(\n    body_mass_index = people[\"weight\"] / (people[\"height\"] / 100) ** 2,\n    has_pets = people[\"pets\"] > 0\n)\n\n\n\n\n\n  \n    \n      \n      hobby\n      height\n      weight\n      age\n      over 30\n      pets\n      body_mass_index\n      has_pets\n    \n  \n  \n    \n      alice\n      Biking\n      172\n      68\n      33\n      True\n      NaN\n      22.985398\n      False\n    \n    \n      bob\n      Dancing\n      181\n      83\n      34\n      True\n      0.0\n      25.335002\n      False\n    \n    \n      charles\n      NaN\n      185\n      112\n      26\n      False\n      5.0\n      32.724617\n      True\n    \n  \n\n\n\n\n할당문 안에서 만든 열은 접근할 수 없습니다:\n\ntry:\n    people.assign(\n        body_mass_index = people[\"weight\"] / (people[\"height\"] / 100) ** 2,\n        overweight = people[\"body_mass_index\"] > 25\n    )\nexcept KeyError as e:\n    print(\"키 에러:\", e)\n\n키 에러: 'body_mass_index'\n\n\n해결책은 두 개의 연속된 할당문으로 나누는 것입니다:\n\nd6 = people.assign(body_mass_index = people[\"weight\"] / people[\"height\"] / 100 ** 2)\nd6.assign(overweight = d6[\"body_mass_index\"] > 25)\n\n\n\n\n\n  \n    \n      \n      hobby\n      height\n      weight\n      age\n      over 30\n      pets\n      body_mass_index\n      overweight\n    \n  \n  \n    \n      alice\n      Biking\n      172\n      68\n      33\n      True\n      NaN\n      0.000040\n      False\n    \n    \n      bob\n      Dancing\n      181\n      83\n      34\n      True\n      0.0\n      0.000046\n      False\n    \n    \n      charles\n      NaN\n      185\n      112\n      26\n      False\n      5.0\n      0.000061\n      False\n    \n  \n\n\n\n\n임시 변수 d6를 만들면 불편합니다. assign() 메서드를 연결하고 싶겠지만 people 객체가 첫 번째 할당문에서 실제로 수정되지 않기 때문에 작동하지 않습니다:\n\ntry:\n    (people\n         .assign(body_mass_index = people[\"weight\"] / (people[\"height\"] / 100) ** 2)\n         .assign(overweight = people[\"body_mass_index\"] > 25)\n    )\nexcept KeyError as e:\n    print(\"키 에러:\", e)\n\n키 에러: 'body_mass_index'\n\n\n하지만 걱정하지 마세요. 간단한 방법이 있습니다. assign() 메서드에 함수(전형적으로 lambda 함수)를 전달하면 DataFrame을 매개변수로 이 함수를 호출할 것입니다:\n\n(people\n     .assign(body_mass_index = lambda df: df[\"weight\"] / (df[\"height\"] / 100) ** 2)\n     .assign(overweight = lambda df: df[\"body_mass_index\"] > 25)\n)\n\n\n\n\n\n  \n    \n      \n      hobby\n      height\n      weight\n      age\n      over 30\n      pets\n      body_mass_index\n      overweight\n    \n  \n  \n    \n      alice\n      Biking\n      172\n      68\n      33\n      True\n      NaN\n      22.985398\n      False\n    \n    \n      bob\n      Dancing\n      181\n      83\n      34\n      True\n      0.0\n      25.335002\n      True\n    \n    \n      charles\n      NaN\n      185\n      112\n      26\n      False\n      5.0\n      32.724617\n      True\n    \n  \n\n\n\n\n문제가 해결되었군요!\n\npeople[\"body_mass_index\"] = people[\"weight\"] / (people[\"height\"] / 100) **2\npeople[\"overweight\"] = people[\"body_mass_index\"] > 25"
  },
  {
    "objectID": "posts/Pandas/pandas.html#표현식-평가",
    "href": "posts/Pandas/pandas.html#표현식-평가",
    "title": "Jung_coding",
    "section": "표현식 평가",
    "text": "표현식 평가\n판다스가 제공하는 뛰어난 기능 하나는 표현식 평가입니다. 이는 numexpr 라이브러리에 의존하기 때문에 설치가 되어 있어야 합니다.\n\npeople\n\n\n\n\n\n  \n    \n      \n      hobby\n      height\n      weight\n      age\n      over 30\n      pets\n      body_mass_index\n      overweight\n    \n  \n  \n    \n      alice\n      Biking\n      172\n      68\n      33\n      True\n      NaN\n      22.985398\n      False\n    \n    \n      bob\n      Dancing\n      181\n      83\n      34\n      True\n      0.0\n      25.335002\n      True\n    \n    \n      charles\n      NaN\n      185\n      112\n      26\n      False\n      5.0\n      32.724617\n      True\n    \n  \n\n\n\n\n\npeople.eval(\"weight / (height/100) ** 2 > 25\")\n\nalice      False\nbob         True\ncharles     True\ndtype: bool\n\n\n할당 표현식도 지원됩니다. inplace=True로 지정하면 수정된 복사본을 만들지 않고 바로 DataFrame을 변경합니다:\n\npeople.eval(\"body_mass_index = weight / (height/100) ** 2\", inplace=True)\npeople\n\n\n\n\n\n  \n    \n      \n      hobby\n      height\n      weight\n      age\n      over 30\n      pets\n      body_mass_index\n      overweight\n    \n  \n  \n    \n      alice\n      Biking\n      172\n      68\n      33\n      True\n      NaN\n      22.985398\n      False\n    \n    \n      bob\n      Dancing\n      181\n      83\n      34\n      True\n      0.0\n      25.335002\n      True\n    \n    \n      charles\n      NaN\n      185\n      112\n      26\n      False\n      5.0\n      32.724617\n      True\n    \n  \n\n\n\n\n'@'를 접두어로 사용하여 지역 변수나 전역 변수를 참조할 수 있습니다:\n\noverweight_threshold = 30\npeople.eval(\"overweight = body_mass_index > @overweight_threshold\", inplace=True)\npeople\n\n\n\n\n\n  \n    \n      \n      hobby\n      height\n      weight\n      age\n      over 30\n      pets\n      body_mass_index\n      overweight\n    \n  \n  \n    \n      alice\n      Biking\n      172\n      68\n      33\n      True\n      NaN\n      22.985398\n      False\n    \n    \n      bob\n      Dancing\n      181\n      83\n      34\n      True\n      0.0\n      25.335002\n      False\n    \n    \n      charles\n      NaN\n      185\n      112\n      26\n      False\n      5.0\n      32.724617\n      True"
  },
  {
    "objectID": "posts/Pandas/pandas.html#dataframe-쿼리하기",
    "href": "posts/Pandas/pandas.html#dataframe-쿼리하기",
    "title": "Jung_coding",
    "section": "DataFrame 쿼리하기",
    "text": "DataFrame 쿼리하기\nquery() 메서드를 사용하면 쿼리 표현식에 기반하여 DataFrame을 필터링할 수 있습니다:\n\npeople.query(\"age > 30 and pets == 0\")\n\n\n\n\n\n  \n    \n      \n      hobby\n      height\n      weight\n      age\n      over 30\n      pets\n      body_mass_index\n      overweight\n    \n  \n  \n    \n      bob\n      Dancing\n      181\n      83\n      34\n      True\n      0.0\n      25.335002\n      False\n    \n  \n\n\n\n\n\npeople[(people[\"age\"]>30)&(people[\"pets\"] == 0)]\n\n\n\n\n\n  \n    \n      \n      hobby\n      height\n      weight\n      age\n      over 30\n      pets\n      body_mass_index\n      overweight\n    \n  \n  \n    \n      bob\n      Dancing\n      181\n      83\n      34\n      True\n      0.0\n      25.335002\n      False\n    \n  \n\n\n\n\n\nmask = (people[\"age\"]>30) & (people[\"pets\"]==0)\n\n\npeople[mask]\n\n\n\n\n\n  \n    \n      \n      hobby\n      height\n      weight\n      age\n      over 30\n      pets\n      body_mass_index\n      overweight\n    \n  \n  \n    \n      bob\n      Dancing\n      181\n      83\n      34\n      True\n      0.0\n      25.335002\n      False"
  },
  {
    "objectID": "posts/Pandas/pandas.html#dataframe-정렬",
    "href": "posts/Pandas/pandas.html#dataframe-정렬",
    "title": "Jung_coding",
    "section": "DataFrame 정렬",
    "text": "DataFrame 정렬\nsort_index 메서드를 호출하여 DataFrame을 정렬할 수 있습니다. 기본적으로 인덱스 레이블을 기준으로 오름차순으로 행을 정렬합니다. 여기에서는 내림차순으로 정렬해 보죠:\n\npeople.sort_index(ascending=True)\n\n\n\n\n\n  \n    \n      \n      hobby\n      height\n      weight\n      age\n      over 30\n      pets\n      body_mass_index\n      overweight\n    \n  \n  \n    \n      alice\n      Biking\n      172\n      68\n      33\n      True\n      NaN\n      22.985398\n      False\n    \n    \n      bob\n      Dancing\n      181\n      83\n      34\n      True\n      0.0\n      25.335002\n      False\n    \n    \n      charles\n      NaN\n      185\n      112\n      26\n      False\n      5.0\n      32.724617\n      True\n    \n  \n\n\n\n\nsort_index는 DataFrame의 정렬된 복사본을 반환합니다. people을 직접 수정하려면 inplace 매개변수를 True로 지정합니다. 또한 axis=1로 지정하여 열 대신 행을 정렬할 수 있습니다:\n\npeople.sort_index(axis=1, inplace=True)\npeople\n\n\n\n\n\n  \n    \n      \n      age\n      body_mass_index\n      height\n      hobby\n      over 30\n      overweight\n      pets\n      weight\n    \n  \n  \n    \n      alice\n      33\n      22.985398\n      172\n      Biking\n      True\n      False\n      NaN\n      68\n    \n    \n      bob\n      34\n      25.335002\n      181\n      Dancing\n      True\n      False\n      0.0\n      83\n    \n    \n      charles\n      26\n      32.724617\n      185\n      NaN\n      False\n      True\n      5.0\n      112\n    \n  \n\n\n\n\n레이블이 아니라 값을 기준으로 DataFrame을 정렬하려면 sort_values에 정렬하려는 열을 지정합니다:\n\npeople.sort_values(by=\"age\", inplace=True)\npeople\n\n\n\n\n\n  \n    \n      \n      age\n      body_mass_index\n      height\n      hobby\n      over 30\n      overweight\n      pets\n      weight\n    \n  \n  \n    \n      charles\n      26\n      32.724617\n      185\n      NaN\n      False\n      True\n      5.0\n      112\n    \n    \n      alice\n      33\n      22.985398\n      172\n      Biking\n      True\n      False\n      NaN\n      68\n    \n    \n      bob\n      34\n      25.335002\n      181\n      Dancing\n      True\n      False\n      0.0\n      83"
  },
  {
    "objectID": "posts/Pandas/pandas.html#dataframe-그래프-그리기",
    "href": "posts/Pandas/pandas.html#dataframe-그래프-그리기",
    "title": "Jung_coding",
    "section": "DataFrame 그래프 그리기",
    "text": "DataFrame 그래프 그리기\nSeries와 마찬가지로 판다스는 DataFrame 기반으로 멋진 그래프를 손쉽게 그릴 수 있습니다.\n예를 들어 plot 메서드를 호출하여 DataFrame의 데이터에서 선 그래프를 쉽게 그릴 수 있습니다:\n\npeople.plot(kind = \"line\", x = \"body_mass_index\", y = [\"height\", \"weight\"])\nplt.show()\n\n\n\n\n맷플롯립의 함수가 지원하는 다른 매개변수를 사용할 수 있습니다. 예를 들어, 산점도를 그릴 때 맷플롯립의 scatter() 함수의 s 매개변수를 사용해 크기를 지정할 수 있습니다:\n\npeople.plot(kind = \"scatter\", x = \"height\", y = \"weight\", s=[40, 120, 200])\nplt.show()\n\n\n\n\n선택할 수 있는 옵션이 많습니다. 판다스 문서의 시각화 페이지에서 마음에 드는 그래프를 찾아 예제 코드를 살펴 보세요."
  },
  {
    "objectID": "posts/Pandas/pandas.html#dataframe-연산",
    "href": "posts/Pandas/pandas.html#dataframe-연산",
    "title": "Jung_coding",
    "section": "DataFrame 연산",
    "text": "DataFrame 연산\nDataFrame이 넘파이 배열을 흉내내려는 것은 아니지만 몇 가지 비슷한 점이 있습니다. 예제 DataFrame을 만들어 보죠:\n\ngrades_array = np.array([[8,8,9],[10,9,9],[4, 8, 2], [9, 10, 10]])\ngrades = pd.DataFrame(grades_array, columns=[\"sep\", \"oct\", \"nov\"], index=[\"alice\",\"bob\",\"charles\",\"darwin\"])\ngrades\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n    \n  \n  \n    \n      alice\n      8\n      8\n      9\n    \n    \n      bob\n      10\n      9\n      9\n    \n    \n      charles\n      4\n      8\n      2\n    \n    \n      darwin\n      9\n      10\n      10\n    \n  \n\n\n\n\nDataFrame에 넘파이 수학 함수를 적용하면 모든 값에 이 함수가 적용됩니다:\n\nnp.sqrt(grades)\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n    \n  \n  \n    \n      alice\n      2.828427\n      2.828427\n      3.000000\n    \n    \n      bob\n      3.162278\n      3.000000\n      3.000000\n    \n    \n      charles\n      2.000000\n      2.828427\n      1.414214\n    \n    \n      darwin\n      3.000000\n      3.162278\n      3.162278\n    \n  \n\n\n\n\n비슷하게 DataFrame에 하나의 값을 더하면 DataFrame의 모든 원소에 이 값이 더해집니다. 이를 브로드캐스팅이라고 합니다:\n\ngrades + 1\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n    \n  \n  \n    \n      alice\n      9\n      9\n      10\n    \n    \n      bob\n      11\n      10\n      10\n    \n    \n      charles\n      5\n      9\n      3\n    \n    \n      darwin\n      10\n      11\n      11\n    \n  \n\n\n\n\n물론 산술 연산(*,/,**…)과 조건 연산(>, ==…)을 포함해 모든 이항 연산에도 마찬가지 입니다:\n\ngrades >= 5\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n    \n  \n  \n    \n      alice\n      True\n      True\n      True\n    \n    \n      bob\n      True\n      True\n      True\n    \n    \n      charles\n      False\n      True\n      False\n    \n    \n      darwin\n      True\n      True\n      True\n    \n  \n\n\n\n\nDataFrame의 max, sum, mean 같은 집계 연산은 각 열에 적용되어 Series 객체가 반환됩니다:\n\ngrades.mean()\n\nsep    7.75\noct    8.75\nnov    7.50\ndtype: float64\n\n\nall 메서드도 집계 연산입니다: 모든 값이 True인지 아닌지 확인합니다. 모든 학생의 점수가 5 이상인 월을 찾아 보죠:\n\n(grades > 5).all()\n\nsep    False\noct     True\nnov    False\ndtype: bool\n\n\nMost of these functions take an optional axis parameter which lets you specify along which axis of the DataFrame you want the operation executed. The default is axis=0, meaning that the operation is executed vertically (on each column). You can set axis=1 to execute the operation horizontally (on each row). For example, let’s find out which students had all grades greater than 5:\n\n(grades > 5).all(axis = 1)\n\nalice       True\nbob         True\ncharles    False\ndarwin      True\ndtype: bool\n\n\nany 메서드는 하나라도 참이면 True를 반환합니다. 한 번이라도 10점을 받은 사람을 찾아 보죠:\n\n(grades == 10).any(axis = 1)\n\nalice      False\nbob         True\ncharles    False\ndarwin      True\ndtype: bool\n\n\nDataFrame에 Series 객체를 더하면 (또는 다른 이항 연산을 수행하면) 판다스는 DataFrame에 있는 모든 행에 이 연산을 브로드캐스팅합니다. 이는 Series 객체가 DataFrame의 행의 개수와 크기가 같을 때만 동작합니다. 예를 들어 DataFrame의 mean(Series 객체)을 빼보죠:\n\ngrades - grades.mean()  # grades - [7.75, 8.75, 7.50] 와 동일\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n    \n  \n  \n    \n      alice\n      0.25\n      -0.75\n      1.5\n    \n    \n      bob\n      2.25\n      0.25\n      1.5\n    \n    \n      charles\n      -3.75\n      -0.75\n      -5.5\n    \n    \n      darwin\n      1.25\n      1.25\n      2.5\n    \n  \n\n\n\n\n모든 9월 성적에서 7.75를 빼고, 10월 성적에서 8.75를 빼고, 11월 성적에서 7.50을 뺍니다. 이는 다음 DataFrame을 빼는 것과 같습니다:\n\npd.DataFrame([[7.75, 8.75, 7.50]]*4, index=grades.index, columns=grades.columns)\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n    \n  \n  \n    \n      alice\n      7.75\n      8.75\n      7.5\n    \n    \n      bob\n      7.75\n      8.75\n      7.5\n    \n    \n      charles\n      7.75\n      8.75\n      7.5\n    \n    \n      darwin\n      7.75\n      8.75\n      7.5\n    \n  \n\n\n\n\n모든 성적의 전체 평균을 빼고 싶다면 다음과 같은 방법을 사용합니다:\n\ngrades - grades.values.mean() # 모든 점수에서 전체 평균(8.00)을 뺍니다\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n    \n  \n  \n    \n      alice\n      0.0\n      0.0\n      1.0\n    \n    \n      bob\n      2.0\n      1.0\n      1.0\n    \n    \n      charles\n      -4.0\n      0.0\n      -6.0\n    \n    \n      darwin\n      1.0\n      2.0\n      2.0"
  },
  {
    "objectID": "posts/Pandas/pandas.html#자동-정렬-1",
    "href": "posts/Pandas/pandas.html#자동-정렬-1",
    "title": "Jung_coding",
    "section": "자동 정렬",
    "text": "자동 정렬\nSeries와 비슷하게 여러 개의 DataFrame에 대한 연산을 수행하면 판다스는 자동으로 행 인덱스 레이블로 정렬하지만 열 이름으로도 정렬할 수 있습니다. 10월부터 12월까지 보너스 포인트를 담은 DataFrame을 만들어 보겠습니다:\n\nbonus_array = np.array([[0,np.nan,2],[np.nan,1,0],[0, 1, 0], [3, 3, 0]])\nbonus_points = pd.DataFrame(bonus_array, columns=[\"oct\", \"nov\", \"dec\"], index=[\"bob\",\"colin\", \"darwin\", \"charles\"])\nbonus_points\n\n\n\n\n\n  \n    \n      \n      oct\n      nov\n      dec\n    \n  \n  \n    \n      bob\n      0.0\n      NaN\n      2.0\n    \n    \n      colin\n      NaN\n      1.0\n      0.0\n    \n    \n      darwin\n      0.0\n      1.0\n      0.0\n    \n    \n      charles\n      3.0\n      3.0\n      0.0\n    \n  \n\n\n\n\n\ngrades + bonus_points\n\n\n\n\n\n  \n    \n      \n      dec\n      nov\n      oct\n      sep\n    \n  \n  \n    \n      alice\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      bob\n      NaN\n      NaN\n      9.0\n      NaN\n    \n    \n      charles\n      NaN\n      5.0\n      11.0\n      NaN\n    \n    \n      colin\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      darwin\n      NaN\n      11.0\n      10.0\n      NaN\n    \n  \n\n\n\n\n덧셈 연산이 수행되었지만 너무 많은 원소가 NaN이 되었습니다. DataFrame을 정렬할 때 일부 열과 행이 한 쪽에만 있기 때문입니다. 다른 쪽에는 누란되었다고 간주합니다(NaN). NaN에 어떤 수를 더하면 NaN이 됩니다."
  },
  {
    "objectID": "posts/Pandas/pandas.html#누락된-데이터-다루기",
    "href": "posts/Pandas/pandas.html#누락된-데이터-다루기",
    "title": "Jung_coding",
    "section": "누락된 데이터 다루기",
    "text": "누락된 데이터 다루기\n실제 데이터에서 누락된 데이터를 다루는 경우는 자주 발생합니다. 판다스는 누락된 데이터를 다룰 수 있는 몇 가지 방법을 제공합니다.\n위 데이터에 있는 문제를 해결해 보죠. 예를 들어, 누락된 데이터는 NaN이 아니라 0이 되어야 한다고 결정할 수 있습니다. fillna() 메서드를 사용해 모든 NaN 값을 어떤 값으로 바꿀 수 있습니다:\n\n(grades + bonus_points).fillna(0)\n\n\n\n\n\n  \n    \n      \n      dec\n      nov\n      oct\n      sep\n    \n  \n  \n    \n      alice\n      0.0\n      0.0\n      0.0\n      0.0\n    \n    \n      bob\n      0.0\n      0.0\n      9.0\n      0.0\n    \n    \n      charles\n      0.0\n      5.0\n      11.0\n      0.0\n    \n    \n      colin\n      0.0\n      0.0\n      0.0\n      0.0\n    \n    \n      darwin\n      0.0\n      11.0\n      10.0\n      0.0\n    \n  \n\n\n\n\n9월의 점수를 0으로 만드는 것은 공정하지 않습니다. 누락된 점수는 그대로 두고, 누락된 보너스 포인트는 0으로 바꿀 수 있습니다:\n\nfixed_bonus_points = bonus_points.fillna(0)\nfixed_bonus_points.insert(0, \"sep\", 0)\nfixed_bonus_points.loc[\"alice\"] = 0\ngrades + fixed_bonus_points\n\n\n\n\n\n  \n    \n      \n      dec\n      nov\n      oct\n      sep\n    \n  \n  \n    \n      alice\n      NaN\n      9.0\n      8.0\n      8.0\n    \n    \n      bob\n      NaN\n      9.0\n      9.0\n      10.0\n    \n    \n      charles\n      NaN\n      5.0\n      11.0\n      4.0\n    \n    \n      colin\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      darwin\n      NaN\n      11.0\n      10.0\n      9.0\n    \n  \n\n\n\n\n훨씬 낫네요: 일부 데이터를 꾸며냈지만 덜 불공정합니다.\n누락된 값을 다루는 또 다른 방법은 보간입니다. bonus_points DataFrame을 다시 보죠:\n\nbonus_points\n\n\n\n\n\n  \n    \n      \n      oct\n      nov\n      dec\n    \n  \n  \n    \n      bob\n      0.0\n      NaN\n      2.0\n    \n    \n      colin\n      NaN\n      1.0\n      0.0\n    \n    \n      darwin\n      0.0\n      1.0\n      0.0\n    \n    \n      charles\n      3.0\n      3.0\n      0.0\n    \n  \n\n\n\n\ninterpolate 메서드를 사용해 보죠. 기본적으로 수직 방향(axis=0)으로 보간합니다. 따라서 수평으로(axis=1)으로 보간하도록 지정합니다.\n\nbonus_points.interpolate(axis=1)\n\n\n\n\n\n  \n    \n      \n      oct\n      nov\n      dec\n    \n  \n  \n    \n      bob\n      0.0\n      1.0\n      2.0\n    \n    \n      colin\n      NaN\n      1.0\n      0.0\n    \n    \n      darwin\n      0.0\n      1.0\n      0.0\n    \n    \n      charles\n      3.0\n      3.0\n      0.0\n    \n  \n\n\n\n\nbob의 보너스 포인트는 10월에 0이고 12월에 2입니다. 11월을 보간하면 평균 보너스 포인트 1을 얻습니다. colin의 보너스 포인트는 11월에 1이지만 9월에 포인트는 얼마인지 모릅니다. 따라서 보간할 수 없고 10월의 포인트는 그대로 누락된 값으로 남아 있습니다. 이를 해결하려면 보간하기 전에 9월의 보너스 포인트를 0으로 설정해야 합니다.\n\nbetter_bonus_points = bonus_points.copy()\nbetter_bonus_points.insert(0, \"sep\", 0)\nbetter_bonus_points.loc[\"alice\"] = 0\nbetter_bonus_points = better_bonus_points.interpolate(axis=1)\nbetter_bonus_points\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n      dec\n    \n  \n  \n    \n      bob\n      0.0\n      0.0\n      1.0\n      2.0\n    \n    \n      colin\n      0.0\n      0.5\n      1.0\n      0.0\n    \n    \n      darwin\n      0.0\n      0.0\n      1.0\n      0.0\n    \n    \n      charles\n      0.0\n      3.0\n      3.0\n      0.0\n    \n    \n      alice\n      0.0\n      0.0\n      0.0\n      0.0\n    \n  \n\n\n\n\n좋습니다. 이제 모든 보너스 포인트가 합리적으로 보간되었습니다. 최종 점수를 확인해 보죠:\n\ngrades + better_bonus_points\n\n\n\n\n\n  \n    \n      \n      dec\n      nov\n      oct\n      sep\n    \n  \n  \n    \n      alice\n      NaN\n      9.0\n      8.0\n      8.0\n    \n    \n      bob\n      NaN\n      10.0\n      9.0\n      10.0\n    \n    \n      charles\n      NaN\n      5.0\n      11.0\n      4.0\n    \n    \n      colin\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      darwin\n      NaN\n      11.0\n      10.0\n      9.0\n    \n  \n\n\n\n\n9월 열이 오른쪽에 추가되었는데 좀 이상합니다. 이는 더하려는 DataFrame이 정확히 같은 열을 가지고 있지 않기 때문입니다(grade DataFrame에는 \"dec\" 열이 없습니다). 따라서 판다스는 알파벳 순서로 최종 열을 정렬합니다. 이를 해결하려면 덧셈을 하기 전에 누락된 열을 추가하면 됩니다:\n\ngrades[\"dec\"] = np.nan\nfinal_grades = grades + better_bonus_points\nfinal_grades\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n      dec\n    \n  \n  \n    \n      alice\n      8.0\n      8.0\n      9.0\n      NaN\n    \n    \n      bob\n      10.0\n      9.0\n      10.0\n      NaN\n    \n    \n      charles\n      4.0\n      11.0\n      5.0\n      NaN\n    \n    \n      colin\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      darwin\n      9.0\n      10.0\n      11.0\n      NaN\n    \n  \n\n\n\n\n12월과 colin에 대해 할 수 있는 것이 많지 않습니다. 보너스 포인트를 만드는 것이 나쁘지만 점수를 합리적으로 올릴 수는 없습니다(어떤 선생님들은 그럴 수 있지만). dropna() 메서드를 사용해 모두 NaN인 행을 삭제합니다:\n\nfinal_grades_clean = final_grades.dropna(how=\"all\")\nfinal_grades_clean\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n      dec\n    \n  \n  \n    \n      alice\n      8.0\n      8.0\n      9.0\n      NaN\n    \n    \n      bob\n      10.0\n      9.0\n      10.0\n      NaN\n    \n    \n      charles\n      4.0\n      11.0\n      5.0\n      NaN\n    \n    \n      darwin\n      9.0\n      10.0\n      11.0\n      NaN\n    \n  \n\n\n\n\n그다음 axis 매개변수를 1로 지정하여 모두 NaN인 열을 삭제합니다:\n\nfinal_grades_clean = final_grades_clean.dropna(axis=1, how=\"all\")\nfinal_grades_clean\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n    \n  \n  \n    \n      alice\n      8.0\n      8.0\n      9.0\n    \n    \n      bob\n      10.0\n      9.0\n      10.0\n    \n    \n      charles\n      4.0\n      11.0\n      5.0\n    \n    \n      darwin\n      9.0\n      10.0\n      11.0"
  },
  {
    "objectID": "posts/Pandas/pandas.html#groupby로-집계하기",
    "href": "posts/Pandas/pandas.html#groupby로-집계하기",
    "title": "Jung_coding",
    "section": "groupby로 집계하기",
    "text": "groupby로 집계하기\nSQL과 비슷하게 판다스는 데이터를 그룹핑하고 각 그룹에 대해 연산을 수행할 수 있습니다.\n먼저 그루핑을 위해 각 사람의 데이터를 추가로 만들겠습니다. NaN 값을 어떻게 다루는지 보기 위해 final_grades DataFrame을 다시 사용하겠습니다:\n\nfinal_grades[\"hobby\"] = [\"Biking\", \"Dancing\", np.nan, \"Dancing\", \"Biking\"]\nfinal_grades\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n      dec\n      hobby\n    \n  \n  \n    \n      alice\n      8.0\n      8.0\n      9.0\n      NaN\n      Biking\n    \n    \n      bob\n      10.0\n      9.0\n      10.0\n      NaN\n      Dancing\n    \n    \n      charles\n      4.0\n      11.0\n      5.0\n      NaN\n      NaN\n    \n    \n      colin\n      NaN\n      NaN\n      NaN\n      NaN\n      Dancing\n    \n    \n      darwin\n      9.0\n      10.0\n      11.0\n      NaN\n      Biking\n    \n  \n\n\n\n\nhobby로 이 DataFrame을 그룹핑해 보죠:\n\ngrouped_grades = final_grades.groupby(\"hobby\")\ngrouped_grades\n\n<pandas.core.groupby.generic.DataFrameGroupBy object at 0x7fba98d85910>\n\n\n이제 hobby마다 평균 점수를 계산할 수 있습니다:\n\ngrouped_grades.mean()\n\n\n\n\n\n  \n    \n      \n      sep\n      oct\n      nov\n      dec\n    \n    \n      hobby\n      \n      \n      \n      \n    \n  \n  \n    \n      Biking\n      8.5\n      9.0\n      10.0\n      NaN\n    \n    \n      Dancing\n      10.0\n      9.0\n      10.0\n      NaN\n    \n  \n\n\n\n\n아주 쉽네요! 평균을 계산할 때 NaN 값은 그냥 무시됩니다."
  },
  {
    "objectID": "posts/Pandas/pandas.html#피봇-테이블",
    "href": "posts/Pandas/pandas.html#피봇-테이블",
    "title": "Jung_coding",
    "section": "피봇 테이블",
    "text": "피봇 테이블\n판다스는 스프레드시트와 비슷하 피봇 테이블을 지원하여 데이터를 빠르게 요약할 수 있습니다. 어떻게 동작하는 알아 보기 위해 간단한 DataFrame을 만들어 보죠:\n\nbonus_points\n\n\n\n\n\n  \n    \n      \n      oct\n      nov\n      dec\n    \n  \n  \n    \n      bob\n      0.0\n      NaN\n      2.0\n    \n    \n      colin\n      NaN\n      1.0\n      0.0\n    \n    \n      darwin\n      0.0\n      1.0\n      0.0\n    \n    \n      charles\n      3.0\n      3.0\n      0.0\n    \n  \n\n\n\n\n\nmore_grades = final_grades_clean.stack().reset_index()\nmore_grades.columns = [\"name\", \"month\", \"grade\"]\nmore_grades[\"bonus\"] = [np.nan, np.nan, np.nan, 0, np.nan, 2, 3, 3, 0, 0, 1, 0]\nmore_grades\n\n\n\n\n\n  \n    \n      \n      name\n      month\n      grade\n      bonus\n    \n  \n  \n    \n      0\n      alice\n      sep\n      8.0\n      NaN\n    \n    \n      1\n      alice\n      oct\n      8.0\n      NaN\n    \n    \n      2\n      alice\n      nov\n      9.0\n      NaN\n    \n    \n      3\n      bob\n      sep\n      10.0\n      0.0\n    \n    \n      4\n      bob\n      oct\n      9.0\n      NaN\n    \n    \n      5\n      bob\n      nov\n      10.0\n      2.0\n    \n    \n      6\n      charles\n      sep\n      4.0\n      3.0\n    \n    \n      7\n      charles\n      oct\n      11.0\n      3.0\n    \n    \n      8\n      charles\n      nov\n      5.0\n      0.0\n    \n    \n      9\n      darwin\n      sep\n      9.0\n      0.0\n    \n    \n      10\n      darwin\n      oct\n      10.0\n      1.0\n    \n    \n      11\n      darwin\n      nov\n      11.0\n      0.0\n    \n  \n\n\n\n\n이제 이 DataFrame에 대해 pd.pivot_table() 함수를 호출하고 name 열로 그룹핑합니다. 기본적으로 pivot_table()은 수치 열의 평균을 계산합니다:\n\npd.pivot_table(more_grades, index=\"name\")\n\n/var/folders/jm/p7tw90mn0m9c_dsbyjy_sxq40000gn/T/ipykernel_1634/584684106.py:1: FutureWarning: pivot_table dropped a column because it failed to aggregate. This behavior is deprecated and will raise in a future version of pandas. Select only the columns that can be aggregated.\n  pd.pivot_table(more_grades, index=\"name\")\n\n\n\n\n\n\n  \n    \n      \n      bonus\n      grade\n    \n    \n      name\n      \n      \n    \n  \n  \n    \n      alice\n      NaN\n      8.333333\n    \n    \n      bob\n      1.000000\n      9.666667\n    \n    \n      charles\n      2.000000\n      6.666667\n    \n    \n      darwin\n      0.333333\n      10.000000\n    \n  \n\n\n\n\n집계 함수를 aggfunc 매개변수로 바꿀 수 있습니다. 또한 집계 대상의 열을 리스트로 지정할 수 있습니다:\n\npd.pivot_table(more_grades, index=\"name\", values=[\"grade\",\"bonus\"], aggfunc=np.max)\n\n\n\n\n\n  \n    \n      \n      bonus\n      grade\n    \n    \n      name\n      \n      \n    \n  \n  \n    \n      alice\n      NaN\n      9.0\n    \n    \n      bob\n      2.0\n      10.0\n    \n    \n      charles\n      3.0\n      11.0\n    \n    \n      darwin\n      1.0\n      11.0\n    \n  \n\n\n\n\ncolumns 매개변수를 지정하여 수평으로 집계할 수 있고 margins=True로 설정해 각 행과 열에 대해 전체 합을 계산할 수 있습니다:\n\npd.pivot_table(more_grades, index=\"name\", values=\"grade\", columns=\"month\", margins=True)\n\n\n\n\n\n  \n    \n      month\n      nov\n      oct\n      sep\n      All\n    \n    \n      name\n      \n      \n      \n      \n    \n  \n  \n    \n      alice\n      9.00\n      8.0\n      8.00\n      8.333333\n    \n    \n      bob\n      10.00\n      9.0\n      10.00\n      9.666667\n    \n    \n      charles\n      5.00\n      11.0\n      4.00\n      6.666667\n    \n    \n      darwin\n      11.00\n      10.0\n      9.00\n      10.000000\n    \n    \n      All\n      8.75\n      9.5\n      7.75\n      8.666667\n    \n  \n\n\n\n\n마지막으로 여러 개의 인덱스나 열 이름을 지정하면 판다스가 다중 레벨 인덱스를 만듭니다:\n\npd.pivot_table(more_grades, index=(\"name\", \"month\"), margins=True)\n\n\n\n\n\n  \n    \n      \n      \n      bonus\n      grade\n    \n    \n      name\n      month\n      \n      \n    \n  \n  \n    \n      alice\n      nov\n      NaN\n      9.00\n    \n    \n      oct\n      NaN\n      8.00\n    \n    \n      sep\n      NaN\n      8.00\n    \n    \n      bob\n      nov\n      2.000\n      10.00\n    \n    \n      oct\n      NaN\n      9.00\n    \n    \n      sep\n      0.000\n      10.00\n    \n    \n      charles\n      nov\n      0.000\n      5.00\n    \n    \n      oct\n      3.000\n      11.00\n    \n    \n      sep\n      3.000\n      4.00\n    \n    \n      darwin\n      nov\n      0.000\n      11.00\n    \n    \n      oct\n      1.000\n      10.00\n    \n    \n      sep\n      0.000\n      9.00\n    \n    \n      All\n      \n      1.125\n      8.75"
  },
  {
    "objectID": "posts/Pandas/pandas.html#함수",
    "href": "posts/Pandas/pandas.html#함수",
    "title": "Jung_coding",
    "section": "함수",
    "text": "함수\n큰 DataFrame을 다룰 때 내용을 간단히 요약하는 것이 도움이 됩니다. 판다스는 이를 위한 몇 가지 함수를 제공합니다. 먼저 수치 값, 누락된 값, 텍스트 값이 섞인 큰 DataFrame을 만들어 보죠. 주피터 노트북은 이 DataFrame의 일부만 보여줍니다:\n\nmuch_data = np.fromfunction(lambda x,y: (x+y*y)%17*11, (10000, 26))\nlarge_df = pd.DataFrame(much_data, columns=list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nlarge_df[large_df % 16 == 0] = np.nan\nlarge_df.insert(3,\"some_text\", \"Blabla\")\nlarge_df\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n      some_text\n      D\n      E\n      F\n      G\n      H\n      I\n      ...\n      Q\n      R\n      S\n      T\n      U\n      V\n      W\n      X\n      Y\n      Z\n    \n  \n  \n    \n      0\n      NaN\n      11.0\n      44.0\n      Blabla\n      99.0\n      NaN\n      88.0\n      22.0\n      165.0\n      143.0\n      ...\n      11.0\n      NaN\n      11.0\n      44.0\n      99.0\n      NaN\n      88.0\n      22.0\n      165.0\n      143.0\n    \n    \n      1\n      11.0\n      22.0\n      55.0\n      Blabla\n      110.0\n      NaN\n      99.0\n      33.0\n      NaN\n      154.0\n      ...\n      22.0\n      11.0\n      22.0\n      55.0\n      110.0\n      NaN\n      99.0\n      33.0\n      NaN\n      154.0\n    \n    \n      2\n      22.0\n      33.0\n      66.0\n      Blabla\n      121.0\n      11.0\n      110.0\n      44.0\n      NaN\n      165.0\n      ...\n      33.0\n      22.0\n      33.0\n      66.0\n      121.0\n      11.0\n      110.0\n      44.0\n      NaN\n      165.0\n    \n    \n      3\n      33.0\n      44.0\n      77.0\n      Blabla\n      132.0\n      22.0\n      121.0\n      55.0\n      11.0\n      NaN\n      ...\n      44.0\n      33.0\n      44.0\n      77.0\n      132.0\n      22.0\n      121.0\n      55.0\n      11.0\n      NaN\n    \n    \n      4\n      44.0\n      55.0\n      88.0\n      Blabla\n      143.0\n      33.0\n      132.0\n      66.0\n      22.0\n      NaN\n      ...\n      55.0\n      44.0\n      55.0\n      88.0\n      143.0\n      33.0\n      132.0\n      66.0\n      22.0\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      9995\n      NaN\n      NaN\n      33.0\n      Blabla\n      88.0\n      165.0\n      77.0\n      11.0\n      154.0\n      132.0\n      ...\n      NaN\n      NaN\n      NaN\n      33.0\n      88.0\n      165.0\n      77.0\n      11.0\n      154.0\n      132.0\n    \n    \n      9996\n      NaN\n      11.0\n      44.0\n      Blabla\n      99.0\n      NaN\n      88.0\n      22.0\n      165.0\n      143.0\n      ...\n      11.0\n      NaN\n      11.0\n      44.0\n      99.0\n      NaN\n      88.0\n      22.0\n      165.0\n      143.0\n    \n    \n      9997\n      11.0\n      22.0\n      55.0\n      Blabla\n      110.0\n      NaN\n      99.0\n      33.0\n      NaN\n      154.0\n      ...\n      22.0\n      11.0\n      22.0\n      55.0\n      110.0\n      NaN\n      99.0\n      33.0\n      NaN\n      154.0\n    \n    \n      9998\n      22.0\n      33.0\n      66.0\n      Blabla\n      121.0\n      11.0\n      110.0\n      44.0\n      NaN\n      165.0\n      ...\n      33.0\n      22.0\n      33.0\n      66.0\n      121.0\n      11.0\n      110.0\n      44.0\n      NaN\n      165.0\n    \n    \n      9999\n      33.0\n      44.0\n      77.0\n      Blabla\n      132.0\n      22.0\n      121.0\n      55.0\n      11.0\n      NaN\n      ...\n      44.0\n      33.0\n      44.0\n      77.0\n      132.0\n      22.0\n      121.0\n      55.0\n      11.0\n      NaN\n    \n  \n\n10000 rows × 27 columns\n\n\n\nhead() 메서드는 처음 5개 행을 반환합니다:\n\nlarge_df.head()\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n      some_text\n      D\n      E\n      F\n      G\n      H\n      I\n      ...\n      Q\n      R\n      S\n      T\n      U\n      V\n      W\n      X\n      Y\n      Z\n    \n  \n  \n    \n      0\n      NaN\n      11.0\n      44.0\n      Blabla\n      99.0\n      NaN\n      88.0\n      22.0\n      165.0\n      143.0\n      ...\n      11.0\n      NaN\n      11.0\n      44.0\n      99.0\n      NaN\n      88.0\n      22.0\n      165.0\n      143.0\n    \n    \n      1\n      11.0\n      22.0\n      55.0\n      Blabla\n      110.0\n      NaN\n      99.0\n      33.0\n      NaN\n      154.0\n      ...\n      22.0\n      11.0\n      22.0\n      55.0\n      110.0\n      NaN\n      99.0\n      33.0\n      NaN\n      154.0\n    \n    \n      2\n      22.0\n      33.0\n      66.0\n      Blabla\n      121.0\n      11.0\n      110.0\n      44.0\n      NaN\n      165.0\n      ...\n      33.0\n      22.0\n      33.0\n      66.0\n      121.0\n      11.0\n      110.0\n      44.0\n      NaN\n      165.0\n    \n    \n      3\n      33.0\n      44.0\n      77.0\n      Blabla\n      132.0\n      22.0\n      121.0\n      55.0\n      11.0\n      NaN\n      ...\n      44.0\n      33.0\n      44.0\n      77.0\n      132.0\n      22.0\n      121.0\n      55.0\n      11.0\n      NaN\n    \n    \n      4\n      44.0\n      55.0\n      88.0\n      Blabla\n      143.0\n      33.0\n      132.0\n      66.0\n      22.0\n      NaN\n      ...\n      55.0\n      44.0\n      55.0\n      88.0\n      143.0\n      33.0\n      132.0\n      66.0\n      22.0\n      NaN\n    \n  \n\n5 rows × 27 columns\n\n\n\n마지막 5개 행을 반환하는 tail() 함수도 있습니다. 원하는 행 개수를 전달할 수도 있습니다:\n\nlarge_df.tail(n=2)\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n      some_text\n      D\n      E\n      F\n      G\n      H\n      I\n      ...\n      Q\n      R\n      S\n      T\n      U\n      V\n      W\n      X\n      Y\n      Z\n    \n  \n  \n    \n      9998\n      22.0\n      33.0\n      66.0\n      Blabla\n      121.0\n      11.0\n      110.0\n      44.0\n      NaN\n      165.0\n      ...\n      33.0\n      22.0\n      33.0\n      66.0\n      121.0\n      11.0\n      110.0\n      44.0\n      NaN\n      165.0\n    \n    \n      9999\n      33.0\n      44.0\n      77.0\n      Blabla\n      132.0\n      22.0\n      121.0\n      55.0\n      11.0\n      NaN\n      ...\n      44.0\n      33.0\n      44.0\n      77.0\n      132.0\n      22.0\n      121.0\n      55.0\n      11.0\n      NaN\n    \n  \n\n2 rows × 27 columns\n\n\n\ninfo() 메서드는 각 열의 내용을 요약하여 출력합니다:\n\nlarge_df.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10000 entries, 0 to 9999\nData columns (total 27 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   A          8823 non-null   float64\n 1   B          8824 non-null   float64\n 2   C          8824 non-null   float64\n 3   some_text  10000 non-null  object \n 4   D          8824 non-null   float64\n 5   E          8822 non-null   float64\n 6   F          8824 non-null   float64\n 7   G          8824 non-null   float64\n 8   H          8822 non-null   float64\n 9   I          8823 non-null   float64\n 10  J          8823 non-null   float64\n 11  K          8822 non-null   float64\n 12  L          8824 non-null   float64\n 13  M          8824 non-null   float64\n 14  N          8822 non-null   float64\n 15  O          8824 non-null   float64\n 16  P          8824 non-null   float64\n 17  Q          8824 non-null   float64\n 18  R          8823 non-null   float64\n 19  S          8824 non-null   float64\n 20  T          8824 non-null   float64\n 21  U          8824 non-null   float64\n 22  V          8822 non-null   float64\n 23  W          8824 non-null   float64\n 24  X          8824 non-null   float64\n 25  Y          8822 non-null   float64\n 26  Z          8823 non-null   float64\ndtypes: float64(26), object(1)\nmemory usage: 2.1+ MB\n\n\n마지막으로 describe() 메서드는 각 열에 대한 주요 집계 연산을 수행한 결과를 보여줍니다:\nFinally, the describe() method gives a nice overview of the main aggregated values over each column: * count: null(NaN)이 아닌 값의 개수 * mean: null이 아닌 값의 평균 * std: null이 아닌 값의 표준 편차 * min: null이 아닌 값의 최솟값 * 25%, 50%, 75%: null이 아닌 값의 25번째, 50번째, 75번째 백분위수 * max: null이 아닌 값의 최댓값\n\nlarge_df.describe()\n\n\n\n\n\n  \n    \n      \n      A\n      B\n      C\n      D\n      E\n      F\n      G\n      H\n      I\n      J\n      ...\n      Q\n      R\n      S\n      T\n      U\n      V\n      W\n      X\n      Y\n      Z\n    \n  \n  \n    \n      count\n      8823.000000\n      8824.000000\n      8824.000000\n      8824.000000\n      8822.000000\n      8824.000000\n      8824.000000\n      8822.000000\n      8823.000000\n      8823.000000\n      ...\n      8824.000000\n      8823.000000\n      8824.000000\n      8824.000000\n      8824.000000\n      8822.000000\n      8824.000000\n      8824.000000\n      8822.000000\n      8823.000000\n    \n    \n      mean\n      87.977559\n      87.972575\n      87.987534\n      88.012466\n      87.983791\n      88.007480\n      87.977561\n      88.000000\n      88.022441\n      88.022441\n      ...\n      87.972575\n      87.977559\n      87.972575\n      87.987534\n      88.012466\n      87.983791\n      88.007480\n      87.977561\n      88.000000\n      88.022441\n    \n    \n      std\n      47.535911\n      47.535523\n      47.521679\n      47.521679\n      47.535001\n      47.519371\n      47.529755\n      47.536879\n      47.535911\n      47.535911\n      ...\n      47.535523\n      47.535911\n      47.535523\n      47.521679\n      47.521679\n      47.535001\n      47.519371\n      47.529755\n      47.536879\n      47.535911\n    \n    \n      min\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      ...\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n      11.000000\n    \n    \n      25%\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      ...\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n      44.000000\n    \n    \n      50%\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      ...\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n      88.000000\n    \n    \n      75%\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      ...\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n      132.000000\n    \n    \n      max\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      ...\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n      165.000000\n    \n  \n\n8 rows × 26 columns"
  },
  {
    "objectID": "posts/Pandas/pandas.html#저장",
    "href": "posts/Pandas/pandas.html#저장",
    "title": "Jung_coding",
    "section": "저장",
    "text": "저장\nCSV, HTML, JSON로 저장해 보죠:\n\nmy_df.to_csv(\"my_df.csv\")\nmy_df.to_html(\"my_df.html\")\nmy_df.to_json(\"my_df.json\")\n\n저장된 내용을 확인해 보죠:\n\nfor filename in (\"my_df.csv\", \"my_df.html\", \"my_df.json\"):\n    print(\"#\", filename)\n    with open(filename, \"rt\") as f:\n        print(f.read())\n        print()\n\n# my_df.csv\n,hobby,weight,birthyear,children\nalice,Biking,68.5,1985,\nbob,Dancing,83.1,1984,3.0\n\n\n# my_df.html\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>hobby</th>\n      <th>weight</th>\n      <th>birthyear</th>\n      <th>children</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>alice</th>\n      <td>Biking</td>\n      <td>68.5</td>\n      <td>1985</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>bob</th>\n      <td>Dancing</td>\n      <td>83.1</td>\n      <td>1984</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n\n# my_df.json\n{\"hobby\":{\"alice\":\"Biking\",\"bob\":\"Dancing\"},\"weight\":{\"alice\":68.5,\"bob\":83.1},\"birthyear\":{\"alice\":1985,\"bob\":1984},\"children\":{\"alice\":null,\"bob\":3.0}}\n\n\n\n인덱스는 (이름 없이) CSV 파일의 첫 번째 열에 저장되었습니다. HTML에서는 <th> 태그와 JSON에서는 키로 저장되었습니다.\n다른 포맷으로 저장하는 것도 비슷합니다. 하지만 일부 포맷은 추가적인 라이브러리 설치가 필요합니다. 예를 들어, 엑셀로 저장하려면 openpyxl 라이브러리가 필요합니다:\n\ntry:\n    my_df.to_excel(\"my_df.xlsx\", sheet_name='People')\nexcept ImportError as e:\n    print(e)\n\nNo module named 'openpyxl'"
  },
  {
    "objectID": "posts/Pandas/pandas.html#로딩",
    "href": "posts/Pandas/pandas.html#로딩",
    "title": "Jung_coding",
    "section": "로딩",
    "text": "로딩\nCSV 파일을 DataFrame으로 로드해 보죠:\n\nmy_df_loaded = pd.read_csv(\"my_df.csv\", index_col=0)\nmy_df_loaded\n\n\n\n\n\n  \n    \n      \n      hobby\n      weight\n      birthyear\n      children\n    \n  \n  \n    \n      alice\n      Biking\n      68.5\n      1985\n      NaN\n    \n    \n      bob\n      Dancing\n      83.1\n      1984\n      3.0\n    \n  \n\n\n\n\n예상할 수 있듯이 read_json, read_html, read_excel 함수도 있습니다. 인터넷에서 데이터를 바로 읽을 수도 있습니다. 예를 들어 깃허브에서 1,000개의 U.S. 도시를 로드해 보죠:\n\nus_cities = None\ntry:\n    csv_url = \"https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv\"\n    us_cities = pd.read_csv(csv_url, index_col=0)\n    us_cities = us_cities.head()\nexcept IOError as e:\n    print(e)\nus_cities\n\n\n\n\n\n  \n    \n      \n      State\n      Population\n      lat\n      lon\n    \n    \n      City\n      \n      \n      \n      \n    \n  \n  \n    \n      Marysville\n      Washington\n      63269\n      48.051764\n      -122.177082\n    \n    \n      Perris\n      California\n      72326\n      33.782519\n      -117.228648\n    \n    \n      Cleveland\n      Ohio\n      390113\n      41.499320\n      -81.694361\n    \n    \n      Worcester\n      Massachusetts\n      182544\n      42.262593\n      -71.802293\n    \n    \n      Columbia\n      South Carolina\n      133358\n      34.000710\n      -81.034814\n    \n  \n\n\n\n\n이외에도 많은 옵션이 있습니다. 특히 datetime 포맷에 관련된 옵션이 많습니다. 더 자세한 내용은 온라인 문서를 참고하세요."
  },
  {
    "objectID": "posts/Pandas/pandas.html#sql-조인",
    "href": "posts/Pandas/pandas.html#sql-조인",
    "title": "Jung_coding",
    "section": "SQL 조인",
    "text": "SQL 조인\n판다스의 강력한 기능 중 하나는 DataFrame에 대해 SQL 같은 조인(join)을 수행할 수 있는 것입니다. 여러 종류의 조인이 지원됩니다. 이너 조인(inner join), 레프트/라이트 아우터 조인(left/right outer join), 풀 조인(full join)입니다. 이에 대해 알아 보기 위해 간단한 DataFrame을 만들어 보죠:\n\ncity_loc = pd.DataFrame(\n    [\n        [\"CA\", \"San Francisco\", 37.781334, -122.416728],\n        [\"NY\", \"New York\", 40.705649, -74.008344],\n        [\"FL\", \"Miami\", 25.791100, -80.320733],\n        [\"OH\", \"Cleveland\", 41.473508, -81.739791],\n        [\"UT\", \"Salt Lake City\", 40.755851, -111.896657]\n    ], columns=[\"state\", \"city\", \"lat\", \"lng\"])\ncity_loc\n\n\n\n\n\n  \n    \n      \n      state\n      city\n      lat\n      lng\n    \n  \n  \n    \n      0\n      CA\n      San Francisco\n      37.781334\n      -122.416728\n    \n    \n      1\n      NY\n      New York\n      40.705649\n      -74.008344\n    \n    \n      2\n      FL\n      Miami\n      25.791100\n      -80.320733\n    \n    \n      3\n      OH\n      Cleveland\n      41.473508\n      -81.739791\n    \n    \n      4\n      UT\n      Salt Lake City\n      40.755851\n      -111.896657\n    \n  \n\n\n\n\n\ncity_pop = pd.DataFrame(\n    [\n        [808976, \"San Francisco\", \"California\"],\n        [8363710, \"New York\", \"New-York\"],\n        [413201, \"Miami\", \"Florida\"],\n        [2242193, \"Houston\", \"Texas\"]\n    ], index=[3,4,5,6], columns=[\"population\", \"city\", \"state\"])\ncity_pop\n\n\n\n\n\n  \n    \n      \n      population\n      city\n      state\n    \n  \n  \n    \n      3\n      808976\n      San Francisco\n      California\n    \n    \n      4\n      8363710\n      New York\n      New-York\n    \n    \n      5\n      413201\n      Miami\n      Florida\n    \n    \n      6\n      2242193\n      Houston\n      Texas\n    \n  \n\n\n\n\n이제 merge() 함수를 사용해 이 DataFrame을 조인해 보죠:\n\npd.merge(left=city_loc, right=city_pop, on=\"city\")\n\n\n\n\n\n  \n    \n      \n      state_x\n      city\n      lat\n      lng\n      population\n      state_y\n    \n  \n  \n    \n      0\n      CA\n      San Francisco\n      37.781334\n      -122.416728\n      808976\n      California\n    \n    \n      1\n      NY\n      New York\n      40.705649\n      -74.008344\n      8363710\n      New-York\n    \n    \n      2\n      FL\n      Miami\n      25.791100\n      -80.320733\n      413201\n      Florida\n    \n  \n\n\n\n\n두 DataFrame은 state란 이름의 열을 가지고 있으므로 state_x와 state_y로 이름이 바뀌었습니다.\n또한 Cleveland, Salt Lake City, Houston은 두 DataFrame에 모두 존재하지 않기 때문에 삭제되었습니다. SQL의 INNER JOIN과 동일합니다. 도시를 삭제하지 않고 NaN으로 채우는 FULL OUTER JOIN을 원하면 how=\"outer\"로 지정합니다:\n\nall_cities = pd.merge(left=city_loc, right=city_pop, on=\"city\", how=\"outer\")\nall_cities\n\n\n\n\n\n  \n    \n      \n      state_x\n      city\n      lat\n      lng\n      population\n      state_y\n    \n  \n  \n    \n      0\n      CA\n      San Francisco\n      37.781334\n      -122.416728\n      808976.0\n      California\n    \n    \n      1\n      NY\n      New York\n      40.705649\n      -74.008344\n      8363710.0\n      New-York\n    \n    \n      2\n      FL\n      Miami\n      25.791100\n      -80.320733\n      413201.0\n      Florida\n    \n    \n      3\n      OH\n      Cleveland\n      41.473508\n      -81.739791\n      NaN\n      NaN\n    \n    \n      4\n      UT\n      Salt Lake City\n      40.755851\n      -111.896657\n      NaN\n      NaN\n    \n    \n      5\n      NaN\n      Houston\n      NaN\n      NaN\n      2242193.0\n      Texas\n    \n  \n\n\n\n\n물론 LEFT OUTER JOIN은 how=\"left\"로 지정할 수 있습니다. 왼쪽의 DataFrame에 있는 도시만 남습니다. 비슷하게 how=\"right\"는 오른쪽 DataFrame에 있는 도시만 결과에 남습니다. 예를 들면:\n\npd.merge(left=city_loc, right=city_pop, on=\"city\", how=\"right\")\n\n\n\n\n\n  \n    \n      \n      state_x\n      city\n      lat\n      lng\n      population\n      state_y\n    \n  \n  \n    \n      0\n      CA\n      San Francisco\n      37.781334\n      -122.416728\n      808976\n      California\n    \n    \n      1\n      NY\n      New York\n      40.705649\n      -74.008344\n      8363710\n      New-York\n    \n    \n      2\n      FL\n      Miami\n      25.791100\n      -80.320733\n      413201\n      Florida\n    \n    \n      3\n      NaN\n      Houston\n      NaN\n      NaN\n      2242193\n      Texas\n    \n  \n\n\n\n\n조인할 키가 DataFrame 인덱스라면 left_index=True나 right_index=True로 지정해야 합니다. 키 열의 이름이 다르면 left_on과 right_on을 사용합니다. 예를 들어:\n\ncity_pop2 = city_pop.copy()\ncity_pop2.columns = [\"population\", \"name\", \"state\"]\npd.merge(left=city_loc, right=city_pop2, left_on=\"city\", right_on=\"name\")\n\n\n\n\n\n  \n    \n      \n      state_x\n      city\n      lat\n      lng\n      population\n      name\n      state_y\n    \n  \n  \n    \n      0\n      CA\n      San Francisco\n      37.781334\n      -122.416728\n      808976\n      San Francisco\n      California\n    \n    \n      1\n      NY\n      New York\n      40.705649\n      -74.008344\n      8363710\n      New York\n      New-York\n    \n    \n      2\n      FL\n      Miami\n      25.791100\n      -80.320733\n      413201\n      Miami\n      Florida"
  },
  {
    "objectID": "posts/Pandas/pandas.html#연결",
    "href": "posts/Pandas/pandas.html#연결",
    "title": "Jung_coding",
    "section": "연결",
    "text": "연결\nDataFrame을 조인하는 대신 그냥 연결할 수도 있습니다. concat() 함수가 하는 일입니다:\n\nresult_concat = pd.concat([city_loc, city_pop])\nresult_concat\n\n\n\n\n\n  \n    \n      \n      state\n      city\n      lat\n      lng\n      population\n    \n  \n  \n    \n      0\n      CA\n      San Francisco\n      37.781334\n      -122.416728\n      NaN\n    \n    \n      1\n      NY\n      New York\n      40.705649\n      -74.008344\n      NaN\n    \n    \n      2\n      FL\n      Miami\n      25.791100\n      -80.320733\n      NaN\n    \n    \n      3\n      OH\n      Cleveland\n      41.473508\n      -81.739791\n      NaN\n    \n    \n      4\n      UT\n      Salt Lake City\n      40.755851\n      -111.896657\n      NaN\n    \n    \n      3\n      California\n      San Francisco\n      NaN\n      NaN\n      808976.0\n    \n    \n      4\n      New-York\n      New York\n      NaN\n      NaN\n      8363710.0\n    \n    \n      5\n      Florida\n      Miami\n      NaN\n      NaN\n      413201.0\n    \n    \n      6\n      Texas\n      Houston\n      NaN\n      NaN\n      2242193.0\n    \n  \n\n\n\n\n이 연산은 (행을 따라) 수직적으로 데이터를 연결하고 (열을 따라) 수평으로 연결하지 않습니다. 이 예에서 동일한 인덱스를 가진 행이 있습니다(예를 들면 3). 판다스는 이를 우아하게 처리합니다:\n\nresult_concat.loc[3]\n\n\n\n\n\n  \n    \n      \n      state\n      city\n      lat\n      lng\n      population\n    \n  \n  \n    \n      3\n      OH\n      Cleveland\n      41.473508\n      -81.739791\n      NaN\n    \n    \n      3\n      California\n      San Francisco\n      NaN\n      NaN\n      808976.0\n    \n  \n\n\n\n\n또는 인덱스를 무시하도록 설정할 수 있습니다:\n\npd.concat([city_loc, city_pop], ignore_index=True)\n\n\n\n\n\n  \n    \n      \n      state\n      city\n      lat\n      lng\n      population\n    \n  \n  \n    \n      0\n      CA\n      San Francisco\n      37.781334\n      -122.416728\n      NaN\n    \n    \n      1\n      NY\n      New York\n      40.705649\n      -74.008344\n      NaN\n    \n    \n      2\n      FL\n      Miami\n      25.791100\n      -80.320733\n      NaN\n    \n    \n      3\n      OH\n      Cleveland\n      41.473508\n      -81.739791\n      NaN\n    \n    \n      4\n      UT\n      Salt Lake City\n      40.755851\n      -111.896657\n      NaN\n    \n    \n      5\n      California\n      San Francisco\n      NaN\n      NaN\n      808976.0\n    \n    \n      6\n      New-York\n      New York\n      NaN\n      NaN\n      8363710.0\n    \n    \n      7\n      Florida\n      Miami\n      NaN\n      NaN\n      413201.0\n    \n    \n      8\n      Texas\n      Houston\n      NaN\n      NaN\n      2242193.0\n    \n  \n\n\n\n\n한 DataFrame에 열이 없을 때 NaN이 채워져 있는 것처럼 동작합니다. join=\"inner\"로 설정하면 양쪽의 DataFrame에 존재하는 열만 반환됩니다:\n\npd.concat([city_loc, city_pop], join=\"inner\")\n\n\n\n\n\n  \n    \n      \n      state\n      city\n    \n  \n  \n    \n      0\n      CA\n      San Francisco\n    \n    \n      1\n      NY\n      New York\n    \n    \n      2\n      FL\n      Miami\n    \n    \n      3\n      OH\n      Cleveland\n    \n    \n      4\n      UT\n      Salt Lake City\n    \n    \n      3\n      California\n      San Francisco\n    \n    \n      4\n      New-York\n      New York\n    \n    \n      5\n      Florida\n      Miami\n    \n    \n      6\n      Texas\n      Houston\n    \n  \n\n\n\n\naxis=1로 설정하면 DataFrame을 수직이 아니라 수평으로 연결할 수 있습니다:\n\npd.concat([city_loc, city_pop], axis=1)\n\n\n\n\n\n  \n    \n      \n      state\n      city\n      lat\n      lng\n      population\n      city\n      state\n    \n  \n  \n    \n      0\n      CA\n      San Francisco\n      37.781334\n      -122.416728\n      NaN\n      NaN\n      NaN\n    \n    \n      1\n      NY\n      New York\n      40.705649\n      -74.008344\n      NaN\n      NaN\n      NaN\n    \n    \n      2\n      FL\n      Miami\n      25.791100\n      -80.320733\n      NaN\n      NaN\n      NaN\n    \n    \n      3\n      OH\n      Cleveland\n      41.473508\n      -81.739791\n      808976.0\n      San Francisco\n      California\n    \n    \n      4\n      UT\n      Salt Lake City\n      40.755851\n      -111.896657\n      8363710.0\n      New York\n      New-York\n    \n    \n      5\n      NaN\n      NaN\n      NaN\n      NaN\n      413201.0\n      Miami\n      Florida\n    \n    \n      6\n      NaN\n      NaN\n      NaN\n      NaN\n      2242193.0\n      Houston\n      Texas\n    \n  \n\n\n\n\n이 경우 인덱스가 잘 정렬되지 않기 때문에 의미가 없습니다(예를 들어 Cleveland와 San Francisco의 인덱스 레이블이 3이기 때문에 동일한 행에 놓여 있습니다). 이 DataFrame을 연결하기 전에 도시로 인덱스를 재설정해 보죠:\n\npd.concat([city_loc.set_index(\"city\"), city_pop.set_index(\"city\")], axis=1)\n\n\n\n\n\n  \n    \n      \n      state\n      lat\n      lng\n      population\n      state\n    \n    \n      city\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      San Francisco\n      CA\n      37.781334\n      -122.416728\n      808976.0\n      California\n    \n    \n      New York\n      NY\n      40.705649\n      -74.008344\n      8363710.0\n      New-York\n    \n    \n      Miami\n      FL\n      25.791100\n      -80.320733\n      413201.0\n      Florida\n    \n    \n      Cleveland\n      OH\n      41.473508\n      -81.739791\n      NaN\n      NaN\n    \n    \n      Salt Lake City\n      UT\n      40.755851\n      -111.896657\n      NaN\n      NaN\n    \n    \n      Houston\n      NaN\n      NaN\n      NaN\n      2242193.0\n      Texas\n    \n  \n\n\n\n\nFULL OUTER JOIN을 수행한 것과 비슷합니다. 하지만 state 열이 state_x와 state_y로 바뀌지 않았고 city 열이 인덱스가 되었습니다.\nappend() 메서드는 DataFrame을 수직으로 연결하는 단축 메서드입니다:\n\ncity_loc.append(city_pop)\n\n/var/folders/jm/p7tw90mn0m9c_dsbyjy_sxq40000gn/T/ipykernel_1634/360768564.py:1: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  city_loc.append(city_pop)\n\n\n\n\n\n\n  \n    \n      \n      state\n      city\n      lat\n      lng\n      population\n    \n  \n  \n    \n      0\n      CA\n      San Francisco\n      37.781334\n      -122.416728\n      NaN\n    \n    \n      1\n      NY\n      New York\n      40.705649\n      -74.008344\n      NaN\n    \n    \n      2\n      FL\n      Miami\n      25.791100\n      -80.320733\n      NaN\n    \n    \n      3\n      OH\n      Cleveland\n      41.473508\n      -81.739791\n      NaN\n    \n    \n      4\n      UT\n      Salt Lake City\n      40.755851\n      -111.896657\n      NaN\n    \n    \n      3\n      California\n      San Francisco\n      NaN\n      NaN\n      808976.0\n    \n    \n      4\n      New-York\n      New York\n      NaN\n      NaN\n      8363710.0\n    \n    \n      5\n      Florida\n      Miami\n      NaN\n      NaN\n      413201.0\n    \n    \n      6\n      Texas\n      Houston\n      NaN\n      NaN\n      2242193.0\n    \n  \n\n\n\n\n판다스의 다른 메서드와 마찬가지로 append() 메서드는 실제 city_loc을 수정하지 않습니다. 복사본을 만들어 수정한 다음 반환합니다."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jung_coding",
    "section": "",
    "text": "“서울시 공공체육시설 부족현상 분석 및 해결 방안”\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nJun 12, 2023\n\n\n\n\n\n\n  \n\n\n\n\n“Pandas”\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMay 1, 2023\n\n\n\n\n\n\n  \n\n\n\n\n“Numpy_Basic”\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 6, 2023\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Jung_coding",
    "section": "",
    "text": "중석이의 코딩 공부 및 프잭트 업로드 공간입니다."
  }
]